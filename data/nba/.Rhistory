mod4 <- lm(log(y) ~ log(x), weights=1/w1)
w1
mod4_fitted <- mod4$fitted
w4 <- (1-exp(mod4_fitted))/(n*exp(mod4_fitted))
mod5 <- lm(log(y) ~ log(x), weight=1/w4)
mod5_fitted <- mod5$fitted
plot(log(x), log(y), main="Weighted Regression with log(x) and log(y)")
points(log(x), mod5_fitted, type="l", col="green")
bc_mod <- mod5
if(log){var=exp(point)*(1-exp(point))/40}
predict.w=function(model,data, transform, log=F){
point=predict(model,newdata=data)
var=point*(1-point)/40
if(log){var=exp(point)*(1-exp(point))/40}
interval=predict(model,newdata=data,interval="prediction",level=0.95,weights=1/var)
return(interval)
}
predict.w(poly_mod,data.frame(x=40))*50
exp(predict.w(bc_mod, data.frame(x=40), log=T))
exp(predict.w(bc_mod, data.frame(x=40), log=T))*50
pred_poly <- predict.w(poly_mod,data.frame(x=40))*50
pred_bc <- exp(predict.w(bc_mod, data.frame(x=40), log=T))*50
predict.w=function(model,data, transform, log=F){
point=predict(model,newdata=data)
var=point*(1-point)/40
if(log){var=exp(point)*(1-exp(point))/40}
interval=predict(model,newdata=data,interval="prediction",level=0.95,weights=1/var)
return(interval)
}
pred_poly <- predict.w(poly_mod,data.frame(x=40))*50
pred_bc <- exp(predict.w(bc_mod, data.frame(x=40), log=T))*50
dicp <- rbinc(pred_poly, pred_bc)
dicp <- rbind(pred_poly, pred_bc)
dicp
pred_poly <- predict.w(poly_mod,data.frame(x=40))*50
pred_bc <- exp(predict.w(bc_mod, data.frame(x=40), log=T))*50
disp <- rbinc(pred_poly, pred_bc)
disp <- rbind(pred_poly, pred_bc)
disp
disp <- rbind(pred_poly, pred_bc)
row.nameS(disp) <- c("Polynomial Model", "Box Cox Transform Model")
row.names(disp) <- c("Polynomial Model", "Box Cox Transform Model")
disp
mod3 <- lm(y ~ logx)
boxcox(mod3)
mod4 <- lm(log(y) ~ log(x), weights=1/w1)
mod4_fitted <- mod4$fitted
w4 <- (1-exp(mod4_fitted))/(n*exp(mod4_fitted))
mod5 <- lm(log(y) ~ log(x), weight=1/w4)
mod5_fitted <- mod5$fitted
plot(log(x), log(y), main="Weighted Regression with log(x) and log(y)")
points(log(x), mod5_fitted, type="l", col="green")
bc_mod <- mod5
mod2 <- lm(y ~ poly(log(x), 2), weights=1/w2)
mod2_fitted <- mod2$fitted
points(log(x), mod2$fitted, type="l", col="blue")
poly_mod <- mod2
island <- read.table("http://www.stat.cmu.edu/~roeder/stat707/=data/=data/sleuth/case2101.asc"
, header=TRUE)
x = island$area
logx = log(x)
n = island$atrisk
z = island$extinctions
y = z/n
vary <- function(phat, n){
(phat*(1-phat))/n
}
w1 <- vary(y, n)
#Regress Y on (logX)^2
mod1 <- lm(y ~ poly(logx, 2), weight=1/w1)
mod1_fitted <- mod1$fitted
plot(log(x), y, main = "Plot of the two different weighted mean functions")
points(log(x), mod1$fitted, type="l", col="red")
w2 <- vary(mod1_fitted, n)
#Use these estimated weights in a second regression
mod2 <- lm(y ~ poly(log(x), 2), weights=1/w2)
mod2_fitted <- mod2$fitted
points(log(x), mod2$fitted, type="l", col="blue")
poly_mod <- mod2
island <- read.table("http://www.stat.cmu.edu/~roeder/stat707/=data/=data/sleuth/case2101.asc"
, header=TRUE)
x = island$area
logx = log(x)
n = island$atrisk
z = island$extinctions
y = z/n
vary <- function(phat, n){
(phat*(1-phat))/n
}
w1 <- vary(y, n)
#Regress Y on (logX)^2
mod1 <- lm(y ~ poly(logx, 2), weight=1/w1)
mod1_fitted <- mod1$fitted
plot(log(x), y, main = "Plot of the two different weighted mean functions")
points(log(x), mod1$fitted, type="l", col="red")
w2 <- vary(mod1_fitted, n)
#Use these estimated weights in a second regression
mod2 <- lm(y ~ poly(log(x), 2), weights=1/w2)
mod2_fitted <- mod2$fitted
points(log(x), mod2$fitted, type="l", col="blue")
poly_mod <- mod2
#Part C
mod3 <- lm(y ~ logx)
boxcox(mod3)
mod4 <- lm(log(y) ~ log(x), weights=1/w1)
mod4_fitted <- mod4$fitted
w4 <- (1-exp(mod4_fitted))/(n*exp(mod4_fitted))
mod5 <- lm(log(y) ~ log(x), weight=1/w4)
mod5_fitted <- mod5$fitted
plot(log(x), log(y), main="Weighted Regression with log(x) and log(y)")
points(log(x), mod5_fitted, type="l", col="green")
bc_mod <- mod5
#Part 4
predict.w=function(model,data, transform, log=F){
point=predict(model,newdata=data)
var=point*(1-point)/40
if(log){var=exp(point)*(1-exp(point))/40}
interval=predict(model,newdata=data,interval="prediction",level=0.95,weights=1/var)
return(interval)
}
pred_poly <- predict.w(poly_mod,data.frame(x=40))*50
pred_bc <- exp(predict.w(bc_mod, data.frame(x=40), log=T))*50
disp <- rbind(pred_poly, pred_bc)
row.names(disp) <- c("Polynomial Model", "Box Cox Transform Model")
disp
n<-50
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
ind<-seq(1,2*n,length=10*n)/n
X1<-as.matrix(cbind(rep(1,n),x))
X2<-as.matrix(cbind(rep(1,n),x,z))
var_new<-rep(NA,length(ind))
var_new1<-rep(NA,length(ind))
for (i in 1:length(ind)){
new_pred<-c(1,ind[i],ind[i]^2)
new_pred1<-c(1,ind[i])
var_new[i]<-t(new_pred)%*%solve(t(X2)%*%X2)%*%new_pred*0.1
var_new1[i]<-t(new_pred1)%*%solve(t(X1)%*%X1)%*%new_pred1*0.1
}
plot(var_new1~ind,type="l",ylab="Risk",xlab="New x",lwd=2,ylim=c(0,0.02),main="n=50")
lines(var_new~ind,lty=2,lwd=2)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
n<-1
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
ind<-seq(1,2*n,length=10*n)/n
X1<-as.matrix(cbind(rep(1,n),x))
X2<-as.matrix(cbind(rep(1,n),x,z))
var_new<-rep(NA,length(ind))
var_new1<-rep(NA,length(ind))
for (i in 1:length(ind)){
new_pred<-c(1,ind[i],ind[i]^2)
new_pred1<-c(1,ind[i])
var_new[i]<-t(new_pred)%*%solve(t(X2)%*%X2)%*%new_pred*0.1
var_new1[i]<-t(new_pred1)%*%solve(t(X1)%*%X1)%*%new_pred1*0.1
}
plot(var_new1~ind,type="l",ylab="Risk",xlab="New x",lwd=2,ylim=c(0,0.02),main="n=50")
lines(var_new~ind,lty=2,lwd=2)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
n = 100
x = seq(1, 100, by = 2)/100
y = rep(2, n) + rnorm(n, 0, .1)
n<-1
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
ind<-seq(1,2*n,length=10*n)/n
X1<-as.matrix(cbind(rep(1,n),x))
X2<-as.matrix(cbind(rep(1,n),x,z))
var_new<-rep(NA,length(ind))
var_new1<-rep(NA,length(ind))
for (i in 1:length(ind)){
new_pred<-c(1,ind[i],ind[i]^2)
new_pred1<-c(1,ind[i])
var_new[i]<-t(new_pred)%*%solve(t(X2)%*%X2)%*%new_pred*0.1
var_new1[i]<-t(new_pred1)%*%solve(t(X1)%*%X1)%*%new_pred1*0.1
}
plot(var_new1~ind,type="l",ylab="Risk",xlab="New x",lwd=2,ylim=c(0,0.02),main="n=50")
lines(var_new~ind,lty=2,lwd=2)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
n<-100
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
ind<-seq(1,2*n,length=10*n)/n
X1<-as.matrix(cbind(rep(1,n),x))
X2<-as.matrix(cbind(rep(1,n),x,z))
var_new<-rep(NA,length(ind))
var_new1<-rep(NA,length(ind))
for (i in 1:length(ind)){
new_pred<-c(1,ind[i],ind[i]^2)
new_pred1<-c(1,ind[i])
var_new[i]<-t(new_pred)%*%solve(t(X2)%*%X2)%*%new_pred*0.1
var_new1[i]<-t(new_pred1)%*%solve(t(X1)%*%X1)%*%new_pred1*0.1
}
plot(var_new1~ind,type="l",ylab="Risk",xlab="New x",lwd=2,ylim=c(0,0.02),main="n=50")
lines(var_new~ind,lty=2,lwd=2)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
w3 <- (1-y)/ny
island <- read.table("http://www.stat.cmu.edu/~roeder/stat707/=data/=data/sleuth/case2101.asc"
, header=TRUE)
x = island$area
logx = log(x)
n = island$atrisk
z = island$extinctions
y = z/n
vary <- function(phat, n){
(phat*(1-phat))/n
}
w1 <- vary(y, n)
#Regress Y on (logX)^2
mod1 <- lm(y ~ poly(logx, 2), weight=1/w1)
mod1_fitted <- mod1$fitted
plot(log(x), y, main = "Plot of the two different weighted mean functions")
points(log(x), mod1$fitted, type="l", col="red")
w2 <- vary(mod1_fitted, n)
#Use these estimated weights in a second regression
mod2 <- lm(y ~ poly(log(x), 2), weights=1/w2)
mod2_fitted <- mod2$fitted
points(log(x), mod2$fitted, type="l", col="blue")
poly_mod <- mod2
mod2
w3 <- (1-y)/n*y
mod4 <- lm(log(y) ~ log(x), weights=1/w3)
mod4_fitted <- mod4$fitted
w4 <- (1-exp(mod4_fitted))/(n*exp(mod4_fitted))
mod5 <- lm(log(y) ~ log(x), weight=1/w4)
mod5_fitted <- mod5$fitted
plot(log(x), log(y), main="Weighted Regression with log(x) and log(y)")
points(log(x), mod5_fitted, type="l", col="green")
bc_mod <- mod5
predict.w=function(model,data, transform, log=F){
point=predict(model,newdata=data)
var=point*(1-point)/40
if(log){var=exp(point)*(1-exp(point))/40}
interval=predict(model,newdata=data,interval="prediction",level=0.95,weights=1/var)
return(interval)
}
pred_poly <- predict.w(poly_mod,data.frame(x=40))*50
pred_bc <- exp(predict.w(bc_mod, data.frame(x=40), log=T))*50
disp <- rbind(pred_poly, pred_bc)
row.names(disp) <- c("Polynomial Model", "Box Cox Transform Model")
disp
island <- read.table("http://www.stat.cmu.edu/~roeder/stat707/=data/=data/sleuth/case2101.asc", header=TRUE)
attach(island)
x = area
y = extinctions/atrisk
plot(log(x), y, main= "Confidence bands for Log Squared Fit", xlab="Log Area")
out <- lm(y ~ poly(log(x), 2))
fitted <- predict(out, interval = "confidence")
lines(log(x), fitted[,"fit"])
lines(log(x), fitted[,"upr"])
lines(log(x), fitted[,"lwr"])
fitted
out <- lm(y ~ poly(log(x), 2))
predict.w=function(model,data, transform, log=F){
point=predict(model,newdata=data)
var=point*(1-point)/40
if(log){var=exp(point)*(1-exp(point))/40}
interval=predict(model,newdata=data,interval="prediction",level=0.95,weights=1/var)
return(interval)
}
out <- lm(y ~ poly(log(x), 2))
out <- lm(y ~ poly(log(x), 2))
predict.w(out,data.frame(x=40))*50
library(Sleuth2)
library(MASS)
data(case1202)
attach(case1202)
#Creating the variables
y= log(Bsal)
s=Senior
s2=s^2
a=Age
a2 = a^2
e = Educ
e2 = e^2
x = Exper
x2 = x^2
sa = s*a
se = s*e
sx = s*x
ae = a*e
ax = a*x
ex = e*x
predictors <- cbind(s, s2, a, a2, e, e2, x, x2, sa, se, sx, ae, ax, ex)
predictors_scaled <- scale(predictors)
#Set up the model with the appropriate predictors
null_mod <- lm(y ~ 1)
full_mod <- lm(y ~ s + s2 + a + a2 +e + e2 + x + x2 + sa + se + sx + ae + ax + ex, data=case1202)
#Use Stepwise regression with AIC to select the best covariates for mod1
step_forward <- stepAIC(null_mod, scope=list(lower = null_mod, upper = full_mod),
direction= "forward", quietly=TRUE)
step_forward
step_backward <- stepAIC(full_mod, scope=list(lower = null_mod, upper = full_mod),
direction= "backward")
step_backward
step_forward
step_backward
library(lars, quietly=TRUE)
?attach
n<-100
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
n
x
y
z
zx
x
n<-100
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
ind<-seq(1,2*n,length=10*n)/n
X1<-as.matrix(cbind(rep(1,n),x))
X2<-as.matrix(cbind(rep(1,n),x,z))
var_new<-rep(NA,length(ind))
var_new1<-rep(NA,length(ind))
ind
X1
X2
var_new
var_new1
for (i in 1:length(ind)){
new_pred<-c(1,ind[i],ind[i]^2)
new_pred1<-c(1,ind[i])
var_new[i]<-t(new_pred)%*%solve(t(X2)%*%X2)%*%new_pred*0.1
var_new1[i]<-t(new_pred1)%*%solve(t(X1)%*%X1)%*%new_pred1*0.1
}
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=2,ylim=c(0,0.02),main="n=50")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=1,ylim=c(0,0.02),main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=4,ylim=c(0,0.02),main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=5,ylim=c(0,0.02),main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",main="Risk for each X")
lines(var_new~ind,lty=2,lwd=2)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, 1), main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .2), main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .1), main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .02), main="Risk for each X")
lines(var_new~ind,lty=3,lwd=2)
lines(var_new~ind,lty=1,lwd=2)
lines(var_new~ind,lty=1)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
lines(rep(0.01,length(ind))~ind)
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .02), main="Risk for each X")
lines(var_new~ind,lty=1)
lines(rep(0.01,length(ind))~ind)
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .02), main="Risk for each X", col="red")
lines(var_new~ind,lty=1, col="blue")
lines(rep(0.01,length(ind))~ind, col="green")
30+50+16
96/110
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("dplyr")
# Set to directory with SQLite database
############# THIS IS A LINE YOU MUST CHANGE ##########################
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("dplyr")
# connect to the sqlite file
con <- dbConnect(drv="SQLite", dbname="nba.db")
game_score <- dbGetQuery(con, 'SELECT * FROM gameScore')
game_score
head(game_score)
game_scores <- dbGetQuery(con, 'SELECT match_id, game_year, home_team_score,
visit_team_score FROM gameScore')
head(game_scores)
scores$result <- ifelse(scores$home_team_score > scores$visit_team_score, 1, 0)
scores <- dbGetQuery(con, 'SELECT match_id, game_year, home_team_score,
visit_team_score FROM gameScore')
scores$result <- ifelse(scores$home_team_score > scores$visit_team_score, 1, 0)
# Set to directory with SQLite database
############# THIS IS A LINE YOU MUST CHANGE ##########################
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("dplyr")
# connect to the sqlite file
con <- dbConnect(drv="SQLite", dbname="nba.db")
scores <- dbGetQuery(con, 'SELECT match_id, game_year, home_team_score,
visit_team_score FROM gameScore')
scores$result <- ifelse(scores$home_team_score > scores$visit_team_score, 1, 0)
scores$home <- 1
head(scores)
table(scores$home)
table(scores$result)
scores$away <- 0
install.packages("e1071")
library("e1071")
feats <- select(scores, home, away)
feats
labels <- selct(scotes, result)
labels <- select(scotes, result)
labels <- select(scores, result)
head(labels)
classifier<-naiveBayes(feats, labels)
classifier
table(predict(classifier, feats), labels, dnn=list('predicted','actual'))
classifier<-naiveBayes(feats, labels)
names(classifier)
classifier$levsls
classifier$levels
classifier$call
classifier$tables
classifier$apriori
table(predict(classifier, feats), labels, dnn=list('predicted','actual'))
iris
head(iris)
iris[,-5]
table(predict(classifier, feats), labels, dnn=list('predicted','actual'))
?predict
typeof(labels)
typeof(feats)
predict(classifier, feats), labels)
predict(classifier, feats)
table(predict(classifier, feats))
x <- predict(classifier, feats)
x
typeof(classifier)
classifier
classifier$table$away
classifier$table$home
feats <- select(scores, home)
labels <- select(scores, result)
classifier<-naiveBayes(feats, labels)
classifier
predict(classifier, feats)
x <- predict(classifier, feats[1])
x
predict(classifier, as.factor(feats))
# Set to directory with SQLite database
############# THIS IS A LINE YOU MUST CHANGE ##########################
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("dplyr")
# connect to the sqlite file
con <- dbConnect(drv="SQLite", dbname="nba.db")
# Inspect RPM and ESPN player's in 2009
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM rpm LEFT JOIN players ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm')
filter(player_rpm_merge, SEASON=2009)
filter(player_rpm_merge, SEASON==2009)
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM rpm LEFT JOIN players ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm WHERE rpm.year_ = 2009')
head(player_rpm_merge)
complete_cases(player_rpm_merge)
complete.cases(player_rpm_merge)
full_cases <- filter(player_rpm_merge, complete.cases(player_rpm_merge))
full_cases
head(full_cases)
full_cases <- filter(player_rpm_merge, !complete.cases(player_rpm_merge))
head(full_cases)
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm WHERE rpm.year_ = 2009')
full_cases <- filter(player_rpm_merge, !complete.cases(player_rpm_merge))
dim(full_cases)
full_cases <- filter(player_rpm_merge, complete.cases(player_rpm_merge))
full_cases
espn_2009 <- dbGetQuery(con, 'SELECT * FROM players WHERE SEASON = 2009')
head(espn_2009)
rpm_2009 <- dbGetQuery(con, 'SELECT * FROM rpm WHERE year_ = 2009')
head(espn_2009)
table(espn_2009$team)
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm WHERE rpm.year_ = 2009')
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm WHERE players.SEASON = 2009')
head(player_rpm_merge)
full_cases <- filter(player_rpm_merge, complete.cases(player_rpm_merge))
rpm_2009 <- dbGetQuery(con, 'SELECT * FROM rpm WHERE year_ = 2009 AND Player LIKE '%Allen%'')
rpm_2009 <- dbGetQuery(con, 'SELECT * FROM rpm WHERE year_ = 2009 AND Player LIKE "%Allen%"')
rpm_2009
rpm_2009 <- dbGetQuery(con, 'SELECT * FROM rpm WHERE year_ = 2009 AND Player LIKE "%Alston%"')
head(rpm_2009)
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail USING match_id')
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id')
head(full_game_summary)
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.player_id = players.player_id')
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId')
dim(full_game_summary)
head(full_game_summary)
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON')
dim(full_game_summary)
head(full_game_summary)
houston_2013 <- dbGetQuery(con,'SELECT * FROM rpm WHERE year_=2013 AND Tm LIKE "hou"')
houston_2013
