#Use these estimated weights in a second regression
mod2 <- lm(y ~ poly(log(x), 2), weights=1/w2)
mod2_fitted <- mod2$fitted
points(log(x), mod2$fitted, type="l", col="blue")
poly_mod <- mod2
mod2
w3 <- (1-y)/n*y
mod4 <- lm(log(y) ~ log(x), weights=1/w3)
mod4_fitted <- mod4$fitted
w4 <- (1-exp(mod4_fitted))/(n*exp(mod4_fitted))
mod5 <- lm(log(y) ~ log(x), weight=1/w4)
mod5_fitted <- mod5$fitted
plot(log(x), log(y), main="Weighted Regression with log(x) and log(y)")
points(log(x), mod5_fitted, type="l", col="green")
bc_mod <- mod5
predict.w=function(model,data, transform, log=F){
point=predict(model,newdata=data)
var=point*(1-point)/40
if(log){var=exp(point)*(1-exp(point))/40}
interval=predict(model,newdata=data,interval="prediction",level=0.95,weights=1/var)
return(interval)
}
pred_poly <- predict.w(poly_mod,data.frame(x=40))*50
pred_bc <- exp(predict.w(bc_mod, data.frame(x=40), log=T))*50
disp <- rbind(pred_poly, pred_bc)
row.names(disp) <- c("Polynomial Model", "Box Cox Transform Model")
disp
island <- read.table("http://www.stat.cmu.edu/~roeder/stat707/=data/=data/sleuth/case2101.asc", header=TRUE)
attach(island)
x = area
y = extinctions/atrisk
plot(log(x), y, main= "Confidence bands for Log Squared Fit", xlab="Log Area")
out <- lm(y ~ poly(log(x), 2))
fitted <- predict(out, interval = "confidence")
lines(log(x), fitted[,"fit"])
lines(log(x), fitted[,"upr"])
lines(log(x), fitted[,"lwr"])
fitted
out <- lm(y ~ poly(log(x), 2))
predict.w=function(model,data, transform, log=F){
point=predict(model,newdata=data)
var=point*(1-point)/40
if(log){var=exp(point)*(1-exp(point))/40}
interval=predict(model,newdata=data,interval="prediction",level=0.95,weights=1/var)
return(interval)
}
out <- lm(y ~ poly(log(x), 2))
out <- lm(y ~ poly(log(x), 2))
predict.w(out,data.frame(x=40))*50
library(Sleuth2)
library(MASS)
data(case1202)
attach(case1202)
#Creating the variables
y= log(Bsal)
s=Senior
s2=s^2
a=Age
a2 = a^2
e = Educ
e2 = e^2
x = Exper
x2 = x^2
sa = s*a
se = s*e
sx = s*x
ae = a*e
ax = a*x
ex = e*x
predictors <- cbind(s, s2, a, a2, e, e2, x, x2, sa, se, sx, ae, ax, ex)
predictors_scaled <- scale(predictors)
#Set up the model with the appropriate predictors
null_mod <- lm(y ~ 1)
full_mod <- lm(y ~ s + s2 + a + a2 +e + e2 + x + x2 + sa + se + sx + ae + ax + ex, data=case1202)
#Use Stepwise regression with AIC to select the best covariates for mod1
step_forward <- stepAIC(null_mod, scope=list(lower = null_mod, upper = full_mod),
direction= "forward", quietly=TRUE)
step_forward
step_backward <- stepAIC(full_mod, scope=list(lower = null_mod, upper = full_mod),
direction= "backward")
step_backward
step_forward
step_backward
library(lars, quietly=TRUE)
?attach
n<-100
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
n
x
y
z
zx
x
n<-100
x<-seq(1,2*n,by=2)/n
y<-rep(2,n) + rnorm(n,0,0.1)
z<-x^2
ind<-seq(1,2*n,length=10*n)/n
X1<-as.matrix(cbind(rep(1,n),x))
X2<-as.matrix(cbind(rep(1,n),x,z))
var_new<-rep(NA,length(ind))
var_new1<-rep(NA,length(ind))
ind
X1
X2
var_new
var_new1
for (i in 1:length(ind)){
new_pred<-c(1,ind[i],ind[i]^2)
new_pred1<-c(1,ind[i])
var_new[i]<-t(new_pred)%*%solve(t(X2)%*%X2)%*%new_pred*0.1
var_new1[i]<-t(new_pred1)%*%solve(t(X1)%*%X1)%*%new_pred1*0.1
}
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=2,ylim=c(0,0.02),main="n=50")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=1,ylim=c(0,0.02),main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=4,ylim=c(0,0.02),main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",lwd=5,ylim=c(0,0.02),main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",main="Risk for each X")
lines(var_new~ind,lty=2,lwd=2)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, 1), main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .2), main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .1), main="Risk for each X")
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .02), main="Risk for each X")
lines(var_new~ind,lty=3,lwd=2)
lines(var_new~ind,lty=1,lwd=2)
lines(var_new~ind,lty=1)
lines(rep(0.01,length(ind))~ind,lty=3,lwd=2)
lines(rep(0.01,length(ind))~ind)
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .02), main="Risk for each X")
lines(var_new~ind,lty=1)
lines(rep(0.01,length(ind))~ind)
plot(var_new1~ind,type="l",ylab="MSE",xlab="X",ylim=c(0, .02), main="Risk for each X", col="red")
lines(var_new~ind,lty=1, col="blue")
lines(rep(0.01,length(ind))~ind, col="green")
30+50+16
96/110
# Set to directory with SQLite database
############# THIS IS A LINE YOU MUST CHANGE ##########################
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("dplyr")
# connect to the sqlite file
con <- dbConnect(drv="SQLite", dbname="nba.db")
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm WHERE players.SEASON = 2009')
espn_2009 <- dbGetQuery(con, 'SELECT * FROM players WHERE SEASON = 2009')
rpm_2009 <- dbGetQuery(con, 'SELECT * FROM rpm WHERE year_ = 2009 AND Player LIKE "%Alston%"')
# Set to directory with SQLite database
############# THIS IS A LINE YOU MUST CHANGE ##########################
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("dplyr")
# connect to the sqlite file
con <- dbConnect(drv="SQLite", dbname="nba.db")
# Inspect RPM and ESPN player's in 2009
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm WHERE players.SEASON = 2009')
head(player_rpm_merge)
?complete.cases
filter(player_rpm_merge, complete.cases(player_rpm_merge))
filter(player_rpm_merge, !complete.cases(player_rpm_merge))
full_players <- filter(player_rpm_merge, !complete.cases(player_rpm_merge))
full_players <- filter(player_rpm_merge, complete.cases(player_rpm_merge))
full_players
full_players <- filter(player_rpm_merge, !complete.cases(player_rpm_merge))
head(full_players)
names(player_rpm_merge)
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm')
count(complete.cases(player_rpm_merge))
sum(complete.cases(player_rpm_merge))
sum(!complete.cases(player_rpm_merge))
head(player_rpm_merge)
player_inputs <- select(player_rpm_merge, playedID, playerName, year, Tm, G, MP, ORPM, DRPM, RPM)
player_inputs <- select(player_rpm_merge, playerID, playerName, year, Tm, G, MP, ORPM, DRPM, RPM)
names(player_rpm_merge)
player_inputs <- select(player_rpm_merge, playerId, playerName, year, Tm, G, MP, ORPM, DRPM, RPM)
player_inputs <- select(player_rpm_merge, playerId, playerName, SEASON, Tm, G, MP, ORPM, DRPM, RPM)
head(player_inputs)
sum(complete.cases(player_inputs)
)
sum(!complete.cases(player_inputs)
)
player_inputs <- select(player_rpm_merge, playerId, playerName, SEASON, Tm, G, MP, ORPM, DRPM, RPM)
filter(player_inputs, !complete.cases(player_inputs))
player_inputs <- select(player_rpm_merge, playerId, playerName, SEASON, Tm, G, MP, ORPM, DRPM, RPM, PER)
head(player_inputs)
tail(player_inputs
)
player_inputs <- select(player_rpm_merge, playerId, playerName, SEASON, Tm, G, MP, PER)
filter(player_inputs, !complete.cases(player_inputs))
filter(player_inputs, playerName = "Ray Allen")
filter(player_inputs, playerName == "Ray Allen")
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON')
dim(full_game_summary)
head(full_game_summary)
filter(player_inputs, !complete.cases(player_inputs))
filter(player_inputs, !complete.cases(full_game_summary))
filter(player_inputs, !complete.cases(full_game_summary))
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON')
filter(player_inputs, complete.cases(full_game_summary))
filter(full_game_summary, complete.cases(full_game_summary))
filter(full_game_summary, !complete.cases(full_game_summary))
head(filter(full_game_summary, !complete.cases(full_game_summary)))
ail(filter(full_game_summary, !complete.cases(full_game_summary)))
tail(filter(full_game_summary, !complete.cases(full_game_summary)))
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON AND gameDetail.netPoints <> NA')
full_game_summary <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
head(filter(full_game_summary, !complete.cases(full_game_summary)))
head(filter(full_game_summary, !complete.cases(full_game_summary)))
head(filter(full_game_summary, complete.cases(full_game_summary)))
tail(filter(full_game_summary, complete.cases(full_game_summary)))
full_game_summary <- dbGetQuery(con, 'SELECT match_id, gameDate, game_year, home_team, home_team_score,
visit_team, visit_team_score, home, playerID FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, playerID FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameScore.playerID FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameDetail.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameScore.playerID FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameScore.playerID FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
tail(filter(full_game_summary, !complete.cases(full_game_summary)))
head(full_game_summary)
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
head(full_game_summary)
tail(full_game_summary)
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm')
#Pulling the relevant columns
player_inputs <- select(player_rpm_merge, playerId, playerName, SEASON, Tm, G, MP, PER)
filter(player_inputs, !complete.cases(player_inputs))
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
head(player_rpm_merge)
player_inputs <- select(player_rpm_merge, playerId, playerName, SEASON, Tm, MPG, PER)
filter(player_inputs, !complete.cases(player_inputs))
head(full_game_summary)
dbListFields(con, "players")
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName players.avgMIN, FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName players.avgMIN FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
head(game_train)
dbListFields(con, "gameDetail")
game_train <- dbGetQuery(con, 'SELECT * FROM gameDetail WHERE match_id = 311225018')
game_train
game_train <- dbGetQuery(con, 'SELECT * FROM FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id WHERE match_id = 311225018')
game_train <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id WHERE match_id = 311225018')
game_train <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id
WHERE gameDetail.match_id = 311225018')
game_train
game_train <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
WHERE gameDetail.match_id = 311225018')
game_train
game_train <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
game_train <- dbGetQuery(con, 'SELECT * FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
names(game_train)
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName  FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
dbListFields(con, "players")
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName  FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName  FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
names(game_train)
dbListFields(con, "rpm")
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName  rpm.RPM FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName,  rpm.RPM FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName,  rpm.RPM , rpm.PER FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
dbListFields(con, "players")
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName, players.avg_MIN, rpm.RPM , rpm.PER FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
dbGetQuery(con, SELECT * FROM rpm WHERE Player LIKE "%Amare%")
dbGetQuery(con, 'SELECT * FROM rpm WHERE Player LIKE "%Amare%"')
dbGetQuery(con, 'SELECT * FROM rpm WHERE Player LIKE "%Amar e%"')
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName, players.avg_MIN, rpm.RPM, rpm.DRPM, rpm.ORPM,
rpm.PER
FROM gameScore LEFT JOIN gameDetail ON gameScore.match_id = gameDetail.match_id
LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName, players.avg_MIN, rpm.RPM, rpm.DRPM, rpm.ORPM,
rpm.PER
FROM gameScore LEFT JOIN gameDetail ON gameScore.match_id = gameDetail.match_id
LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
dbListFields(con, "players")
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName, players.avg_MIN, players.avg_GP, rpm.RPM, rpm.DRPM, rpm.ORPM,
rpm.PER
FROM gameScore LEFT JOIN gameDetail ON gameScore.match_id = gameDetail.match_id
LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
library("plyr")
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("plyr")
library("dplyr")
# connect to the sqlite file
con <- dbConnect(drv="SQLite", dbname="nba.db")
# Inspect RPM and ESPN player's in 2009
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm')
#Pulling the relevant columns
player_inputs <- select(player_rpm_merge, playerId, playerName, SEASON, Tm, MPG, PER)
filter(player_inputs, !complete.cases(player_inputs))
######### CONSTRUCT THE X TEST DATASET ###############
full_game_summary <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName FROM gameScore LEFT JOIN gameDetail
ON gameScore.match_id = gameDetail.match_id LEFT JOIN
players ON gameDetail.playerId = players.playerId
WHERE gameScore.game_year = players.SEASON
AND gameDetail.netPoints is not null')
#### TEST PULLING DATA FROM PREVIOUS YEAR ###########
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName, players.avg_MIN, players.avg_GP, rpm.RPM, rpm.DRPM, rpm.ORPM,
rpm.PER
FROM gameScore LEFT JOIN gameDetail ON gameScore.match_id = gameDetail.match_id
LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
full_game_summary
head(full_game_summary)
con <- dbConnect(drv="SQLite", dbname="nba.db")
# get a list of all tables
alltables<- dbListTables(con)
#get score of each game, detail of each game and player_av_year data frame
scores <- dbGetQuery(con, 'SELECT * FROM gameScore')
detail<-dbGetQuery(con, 'SELECT * FROM gameDetail')
players<- dbGetQuery(con, 'SELECT * FROM players')
nscores=length(scores$home_team_score)
results =vector(mode = "numeric", length =
nscores)
nscore
nscores
dbListFields(con, "players")
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName, players.avg_MIN, players.avg_GP, rpm.RPM, rpm.DRPM, rpm.ORPM,
rpm.PER
FROM gameScore LEFT JOIN gameDetail ON gameScore.match_id = gameDetail.match_id
LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
game_train
dbListFields(con, "players")
game_train
for(i in 1:nscores){
if (scores$home_team_score[i] > scores$visit_team_score[i]){
results[i] <- 1}
else{
results[i]<-0
}
}
scores["result"]<- results
results
data2012<-players[which(players$SEASON=='2012'),]
score2013 <- scores[which(scores$game_year=='2013'),]
# Inspect RPM and ESPN player's in 2009
player_rpm_merge <- dbGetQuery(con,'SELECT * FROM players LEFT JOIN rpm ON
players.playerName=rpm.Player AND players.SEASON=rpm.year_
AND players.team = rpm.Tm')
game_train <- dbGetQuery(con, 'SELECT gameScore.match_id, gameScore.gameDate, gameScore.game_year,
gameScore.home_team, gameScore.home_team_score, gameScore.visit_team, gameScore.visit_team_score,
home, gameDetail.playerID, players.playerName, players.avg_MIN, players.avg_GP, rpm.RPM, rpm.DRPM, rpm.ORPM,
rpm.PER
FROM gameScore LEFT JOIN gameDetail ON gameScore.match_id = gameDetail.match_id
LEFT JOIN players ON gameDetail.playerId = players.playerId
LEFT JOIN rpm ON players.playerName=rpm.Player AND players.SEASON=rpm.year_ AND players.team = rpm.Tm
WHERE gameDetail.match_id = 311225018 AND players.SEASON = 2011')
scan()
