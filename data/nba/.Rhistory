poly_draws <- mvrnorm(n=3, mean_poly, cov_poly)
poly_upper <- sqrt(diag(cov_poly))
poly_lower <- -sqrt(diag(cov_poly))
## PLOTS
plot(x, poly_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3)
lines(x, poly_draws[1,] + poly_upper, col="red")
lines(x, poly_draws[1,] + poly_lower, col="red")
lines(x, poly_draws[2,], type="l", col="green")
lines(x, poly_draws[2,] + poly_upper, col="green")
lines(x, poly_draws[2,] + poly_lower, col="green")
lines(x, poly_draws[3,], type="l", col="blue")
lines(x, poly_draws[3,] + poly_upper, col="blue")
lines(x, poly_draws[3,] + poly_lower, col="blue")
################### EXPONENTIAL ###########################
## Create Sigmas and draws for polyear kernel
s11_exp <- cov_create(x, x, exp_cov)
s12_exp <- cov_create(x, xstar, exp_cov)
s21_exp <- cov_create(xstar, x, exp_cov)
s22_exp <- cov_create(xstar, xstar, exp_cov) + .1*diag(,5)
mean_exp <- s12_exp %*% solve(s22_exp) %*% ystar
cov_exp <-s11_exp - s12_exp %*% solve(s22_exp) %*% s21_exp
#DRAWS and BANDS
exp_draws <- mvrnorm(n=3, mean_exp, cov_exp)
exp_upper <- sqrt(diag(cov_exp))
exp_lower <- -sqrt(diag(cov_exp))
## PLOTS
plot(x, exp_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3)
lines(x, exp_draws[1,] + exp_upper, col="red")
lines(x, exp_draws[1,] + exp_lower, col="red")
lines(x, exp_draws[2,], type="l", col="green")
lines(x, exp_draws[2,] + exp_upper, col="green")
lines(x, exp_draws[2,] + exp_lower, col="green")
lines(x, exp_draws[3,], type="l", col="blue")
lines(x, exp_draws[3,] + exp_upper, col="blue")
lines(x, exp_draws[3,] + exp_lower, col="blue")
points(xstar, ystar, pch=21, lwd=3, col="black")
squared_exp <- function(x1, x2, lambda) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
lambda
rm(lambda)
squared_exp <- function(x1, x2, lambda) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
lambda_vals <- c(.5, 1, 1.5)
cov_create <- function(x1, x2, func) {
size1 <- length(x1)
size2 <- length(x2)
mat = matrix(NA, nrow=size1, ncol=size2)
for(i in 1:size1){
for(j in 1:size2){
mat[i, j] = func(x1[i],x2[j], lambda=lambda)
}
}
return(mat)
}
cov_create <- function(x1, x2, func) {
size1 <- length(x1)
size2 <- length(x2)
mat = matrix(NA, nrow=size1, ncol=size2)
for(i in 1:size1){
for(j in 1:size2){
mat[i, j] = func(x1[i],x2[j])
}
}
return(mat)
}
s11_se <- cov_create(x, x, squared_exp(lambda=lambda_vals[1]))
lambda_vals <- c(.5, 1, 1.5)
squared_exp <- function(x1, x2, lambda=lambda_vals[1]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
lambda_vals[1]
lambda_vals[2]
lambda_vals[3]
s11_se1 <- cov_create(x, x, squared_exp)
dim(s11_se1)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
lambda_vals <- c(.5, 1, 1.5)
squared_exp <- function(x1, x2, lambda=lambda_vals[1]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
s11_se1 <- cov_create(x, x, squared_exp)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
mean_se1 <- s12_se1 %*% solve(s22_se1) %*% ystar
cov_se1 <-s11_se1 - s12_se1 %*% solve(s22_se1) %*% s21_se1
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_draws
dim(se1_draws)
se1_upper <- sqrt(diag(cov_se1))
se1_lower <- -sqrt(diag(cov_se1))
plot(x, se1_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3, col="black")
lines(x, se1_draws[1,] + se1_upper, col="red")
lines(x, se1_draws[1,] + se1_lower, col="red")
par(mfrow=c(1,3))
lambda_vals <- c(.5, 1, 1.5)
squared_exp <- function(x1, x2, lambda=lambda_vals[1]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
s11_se1 <- cov_create(x, x, squared_exp)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
mean_se1 <- s12_se1 %*% solve(s22_se1) %*% ystar
cov_se1 <-s11_se1 - s12_se1 %*% solve(s22_se1) %*% s21_se1
#DRAWS and BANDS
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_upper <- sqrt(diag(cov_se1))
se1_lower <- -sqrt(diag(cov_se1))
## PLOTS
par(mfrow=c(1,3))
plot(x, se1_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3, col="black")
lines(x, se1_draws[1,] + se1_upper, col="red")
lines(x, se1_draws[1,] + se1_lower, col="red")
#### LAMBDA = 1 ####
squared_exp <- function(x1, x2, lambda=lambda_vals[2]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
s11_se1 <- cov_create(x, x, squared_exp)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
mean_se1 <- s12_se1 %*% solve(s22_se1) %*% ystar
cov_se1 <-s11_se1 - s12_se1 %*% solve(s22_se1) %*% s21_se1
#DRAWS and BANDS
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_upper <- sqrt(diag(cov_se1))
se1_lower <- -sqrt(diag(cov_se1))
## PLOTS
plot(x, se1_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3, col="black")
lines(x, se1_draws[1,] + se1_upper, col="red")
lines(x, se1_draws[1,] + se1_lower, col="red")
#### LAMBDA = 1.5 ####
squared_exp <- function(x1, x2, lambda=lambda_vals[3]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
s11_se1 <- cov_create(x, x, squared_exp)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
mean_se1 <- s12_se1 %*% solve(s22_se1) %*% ystar
cov_se1 <-s11_se1 - s12_se1 %*% solve(s22_se1) %*% s21_se1
#DRAWS and BANDS
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_upper <- sqrt(diag(cov_se1))
se1_lower <- -sqrt(diag(cov_se1))
## PLOTS
plot(x, se1_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3, col="black")
lines(x, se1_draws[1,] + se1_upper, col="red")
lines(x, se1_draws[1,] + se1_lower, col="red")
polygon(c(x, rev(x)), c(se1_draws[1,] + se1_lower, rev(se1_draws[1,] + se1_upper)), col="green")
lambda_vals <- c(.5, 1, 1.5)
squared_exp <- function(x1, x2, lambda=lambda_vals[1]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
s11_se1 <- cov_create(x, x, squared_exp)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
mean_se1 <- s12_se1 %*% solve(s22_se1) %*% ystar
cov_se1 <-s11_se1 - s12_se1 %*% solve(s22_se1) %*% s21_se1
#DRAWS and BANDS
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_upper <- sqrt(diag(cov_se1))
se1_lower <- -sqrt(diag(cov_se1))
## PLOTS
par(mfrow=c(1,3))
plot(x, se1_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3, col="black")
lines(x, se1_draws[1,] + se1_upper, col="red")
lines(x, se1_draws[1,] + se1_lower, col="red")
polygon(c(x, rev(x)), c(se1_draws[1,] + se1_lower, rev(se1_draws[1,] + se1_upper)), col="green")
#### LAMBDA = 1 ####
squared_exp <- function(x1, x2, lambda=lambda_vals[2]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
s11_se1 <- cov_create(x, x, squared_exp)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
mean_se1 <- s12_se1 %*% solve(s22_se1) %*% ystar
cov_se1 <-s11_se1 - s12_se1 %*% solve(s22_se1) %*% s21_se1
#DRAWS and BANDS
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_upper <- sqrt(diag(cov_se1))
se1_lower <- -sqrt(diag(cov_se1))
## PLOTS
plot(x, se1_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3, col="black")
lines(x, se1_draws[1,] + se1_upper, col="red")
lines(x, se1_draws[1,] + se1_lower, col="red")
polygon(c(x, rev(x)), c(se1_draws[1,] + se1_lower, rev(se1_draws[1,] + se1_upper)), col="green")
#### LAMBDA = 1.5 ####
squared_exp <- function(x1, x2, lambda=lambda_vals[3]) {
exp((-1/2*lambda^2)*(x1-x2)^2)
}
s11_se1 <- cov_create(x, x, squared_exp)
s12_se1 <- cov_create(x, xstar, squared_exp)
s21_se1 <- cov_create(xstar, x, squared_exp)
s22_se1 <- cov_create(xstar, xstar, squared_exp) + .1*diag(,5)
mean_se1 <- s12_se1 %*% solve(s22_se1) %*% ystar
cov_se1 <-s11_se1 - s12_se1 %*% solve(s22_se1) %*% s21_se1
#DRAWS and BANDS
se1_draws <- mvrnorm(n=3, mean_se1, cov_se1)
se1_upper <- sqrt(diag(cov_se1))
se1_lower <- -sqrt(diag(cov_se1))
## PLOTS
plot(x, se1_draws[1,], type="l", col="red")
points(xstar, ystar, pch=21, lwd=3, col="black")
lines(x, se1_draws[1,] + se1_upper, col="red")
lines(x, se1_draws[1,] + se1_lower, col="red")
polygon(c(x, rev(x)), c(se1_draws[1,] + se1_lower, rev(se1_draws[1,] + se1_upper)), col="green")
lambda_vals <- c(.2, .5, .8)
lin_draws <- mvrnorm(n=3, mean_lin, cov_lin)
exp((-1/2*lambda^2))
exp((-1/2*1^2))
exp((-1/2*.5^2))
exp((-1/2*.2^2))
exp((-1/2*.8^2))
suppressPackageStartupMessages(library(MASS))
suppressPackageStartupMessages(library(fields))
suppressPackageStartupMessages(library(plotrix))
suppressPackageStartupMessages(library(alr3))
data(ufcwc.txt)
data(ufcwc)
suppressPackageStartupMessages(library(alr3))
data(ufcwc)
ufcwc
head(ufcwc)
Y = ufcwc$Height
X = ufcwc$Dbh
plot(X, Y)
plot(X, Y)
lin_mod <- lm(Y ~ X)
abline(lin_mod)
plot(lin_mod)
suppressPackageStartupMessages(library(splines))
install.packages("splines")
install.packages("splines")
spline_mod = smooth.spline(X,Y,df=10,cv=TRUE)
spline_mod = smooth.spline(X,Y,df=10)
plot(X, Y)
spline_mod = smooth.spline(X,Y,df=10)
lines(X,spline_mod$Y)
spline_mod = smooth.spline(X,Y)
lines(X,spline_mod$Y)
plot(X, Y)
lin_mod <- lm(Y ~ X)
abline(lin_mod)
## Fit a spline
spline_mod = smooth.spline(X,Y)
lines(X,spline_mod$Y)
spline_mod$Y
names(spline_mod)
names(spline_mod$y)
spline_mod$y
lines(X,spline_mod$y)
lines(x,spline_mod$y)
spline_mod$x
lines(spline_mod$x, spline_mod$y)
plot(X, Y)
lin_mod <- lm(Y ~ X)
abline(lin_mod)
## Fit a spline
spline_mod = smooth.spline(X,Y)
lines(spline_mod$x, spline_mod$y)
lines(spline_mod$x, spline_mod$y, df=3)
spline_mod = smooth.spline(X,Y, df=3)
spline_mod = smooth.spline(X,Y)
lines(spline_mod$x, spline_mod$y)
462*2
spline_mod = smooth.spline(X,Y, df=3, keep.data = TRUE)
lines(spline_mod$x, spline_mod$y)
spline_mod2 <- gam(Height ~ s(Dbh, 3), data=ufcwc)
anova(lin_mod, spline_mod2)
suppressPackageStartupMessages(library(alr3))
suppressPackageStartupMessages(library(splines))
suppressPackageStartupMessages(library(gam))
data(ufcwc)
lm
lin_mod
suppressPackageStartupMessages(library(alr3))
suppressPackageStartupMessages(library(splines))
suppressPackageStartupMessages(library(gam))
data(ufcwc)
## Residual Plots function
resid_plots <- function(model, data) {
## Pull quantities on interest from model
yhat <- fitted(model)
rstan <- rstandard(model, type="deviance")
rstu <- rstudent(model, type="deviance")
cooks <- cooks.distance(model)
leverage <- hatvalues(model)
n <- length(yhat)
# Count the number of predictor variables
vars <- all.vars(formula(model)[[3]])
num_plots <- 5 + length(vars)
#Use number of predictor variables to decide how much plots
par(mfrow = c(3, ceiling(num_plots/3)))
## Plot all of the covariates vs. Standardized residuals
for(v in vars){
plot(data[,v], rstan, ylim = max(abs(rstan))*c(-1,1),
main = paste("Standardized Resids vs", v), xlab=v, ylab="Std. Dev. resids")
abline(h=c(0,-2,2), lty = c(1,2,2))
}
## STANDARDIZED RESIDUALS
plot(rstan ~ yhat, ylim = max(abs(rstan))*c(-1,1),
main = "Standardized Resids vs Fitted")
abline(h=c(0,-2,2), lty = c(1,2,2))
## STUDENIZED RESIDUALS
plot(rstu ~ yhat, ylim=max(abs(rstu))*c(-1,1),
main="Studentized Resids vs Fitted")
abline(h = qnorm(0.05/n/2)*c(-1,0,1), lty = c(2,1,2))
## PLOTTING NORMAL
qqnorm(rstan)
qqline(rstan)
## PLOTTING COOKS
plot(cooks, main="Cook's Distance")
## PLOTTING LEVEAGE
plot(leverage, main="Leverage")
}
# Set variables and plots the initial data
Y = ufcwc$Height
X = ufcwc$Dbh
plot(X, Y)
lin_mod <- lm(Height ~ Dbh, data=ufcwc)
abline(lin_mod)
lm_resids <- rstandard(lin_mod)
lin_fitted <- fitted(lin_mod)
## Fit a spline
spline_mod = smooth.spline(X,Y, df=3, keep.data = TRUE)
lines(spline_mod$x, spline_mod$y)
## Spline with gam
spline_mod2 <- gam(Height ~ s(Dbh, 3), data=ufcwc)
## Parial F Test
anova(lin_mod, spline_mod2)
spline_mod2 <- gam(Height ~ s(Dbh, 3), data=ufcwc)
install.packages("gam")
suppressPackageStartupMessages(library(gam))
spline_mod2 <- gam(Height ~ s(Dbh, 3), data=ufcwc)
setwd("C:/Users/Lee/game_simulation")
setwd("C:/Users/Lee/game_simulation")
read.csv("scores.csv")
scores <- read.csv("scores.csv")
head(scores)
scores <- read.csv("scores.csv")
head(scores)
tail(scores)
table(scores$season)
scores(season)
scores[3000:3005,]
players <- read.csv("players.csv")
head(players)
table(players$SEASON)
getwd()
# Set to directory with SQLite database
############# THIS IS A LINE YOU MUST CHANGE ##########################
setwd("C:/Users/Lee/game_simulation/data/nba")
# Read in the appropriate packages. Might have to do install.packages("RSQLite") the first time
# install.packages("RSQLite")
library("RSQLite")
library("plyr")
library("dplyr")
library("doBy")
# connect to the sqlite file
con <- dbConnect(drv="SQLite", dbname="nba.db")
alltables <- dbListTables(con)
gs <- dbGetQuery(con, 'SELECT * FROM gameScore')
p <- dbGetQuery(con, 'SELECT * FROM players')
alltables
temp <- dbGetQuery(con, 'SELECT * FROM rpm')
names(temp)
table(temp$year)
rm(temp)
names(p)
table(p$SEASON)
40/3
40/3
anova(lm_mod, spline_mod2)
anova(lin_mod, spline_mod2)
anova(lin_mod, spline_mod)
spline_mod
spline_mod2
spline_mod2
range(X)
h = c(10, 20, 30, 40, 50, 100, 200)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(Y~X,deg=0,alpha=H)
library(locfit)
install.packages("locfit")
library(locfit)
out = gcvplot(Y~X,deg=0,alpha=H)
plot(out$df,out$values)
?gcvplot
h = seq(1, 500, by=1)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(Y~X,deg=0,alpha=H)
plot(out$df,out$values)
h = seq(1, 500, by=10)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(Y~X,deg=0,alpha=H)
h = seq(1, 500, by=30)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(Y~X,deg=0,alpha=H)
plot(out$df,out$values)
h = seq(1, 30, by=1)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(Y~X,deg=0,alpha=H)
warnings()
h = seq(1, 30, by=2)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(Y~X,deg=0,alpha=H)
warnings()
?gcvplot
out
out$df
out$values
loc_reg <- loess(Height ~ Dbh, data=ufcwc, degree=1, span =.25)
out = gcvplot(loc_reg,deg=0,alpha=H)
h = seq(1, 30, by=3)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(loc_reg,deg=0,alpha=H)
h = seq(4, 30, by=5)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
H
H = cbind(zero,h)
out = gcvplot(loc_reg,deg=0,alpha=H)
h = seq(5, 30, by=6)
k = length(h)
zero = rep(0,k)
H = cbind(zero,h)
out = gcvplot(loc_reg,deg=0,alpha=H)
plot(out$df,out$values)
loc_reg <- loess(Height ~ Dbh, data=ufcwc, degree=1, span =.25)
plot(loc_reg)
plot(X, fitted(loc_reg))
loc_reg <- loess(Height ~ Dbh, data=ufcwc, degree=1, span =.25)
plot(loc_reg)
lines(X, fitted(loc_reg), type="l")
plot(X, residuals(loc_reg))
?gcvplot
out = gcvplot(Height ~ Dbh, data=ufcwc, deg=0,alpha=H)
out = gcvplot(Height ~ Dbh, data=ufcwc, deg=0, alpha=seq(0.2,1.0,by=0.05))
out = gcvplot(Height ~ Dbh, data=ufcwc, deg=0, alpha=seq(0.2,1.0,by=0.05))
plot(out)
out = gcvplot(Height ~ Dbh, data=ufcwc, deg=0, alpha=seq(0.2,2,by=0.05))
plot(out$df,out$values)
plot(out$df,out$values)
out = gcvplot(loc_reg, data=ufcwc, deg=0, alpha=seq(0.2,2,by=0.05))
plot(out$df,out$values)
plot(out)
out
out
out
names(out)
out$values
min(out$values)
dim(ufcwc)
cv = rep(0,50)
df = seq(2,139,length=50)
for(i in 1:50){cv[i] = smooth.spline(X,Y,df=df[i],cv=TRUE)$cv}
cv
plot(df,cv,type="l")
df[cv == min(cv)]
?lda
?bs
?ns
ns(X, knots=c(400,800))
nat_spline <- gam(Y ~ ns(X, knots=c(400,800)))
nat_spline
plot(X, Y())
plot(X, Y
)
lines(nat_spline)
plot(nat_spline)
name(nat_spline)
names(nat_spline)
plot(nat_spline)
lines(nat_spline)
plot(X, Y
)
lines(nat_spline)
lines(X, fitted(nat_spline))
plot(nat_spline_)
plot(nat_spline)
