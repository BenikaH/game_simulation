y_ord2 <- Y[ord]
points(x_ord2, exp(fitted(log_fit))[ord], type="l")
log_fit <- lm(Height ~ log(Dbh), data=ufcwc)
plot(X, Y)
ord <- order(X)
x_ord2 <- X[ord]
log_fitted <- exp(fitted(log_fit))
y_ord2 <- Y[ord]
points(x_ord2, exp(fitted(log_fit))[ord], type="l")
log_fit <- lm(log(Height) ~ log(Dbh), data=ufcwc)
plot(X, Y)
ord <- order(X)
log_fitted <- exp(fitted(log_fit))
x_ord2 <- X[ord]
y_ord2 <- Y[ord]
points(x_ord2, exp(fitted(log_fit))[ord], type="l")
weeks_t <- c(.95, .95, .95, .95, .03, .03, .03, .03, .02, .02, .02, .02)
e_w <- c(.001, .001, .999, .999, .02, .02, .98, .98, .04, .04, .96, .96)
r_e <- c(.9, .1, .2, .8, .9, .1, .2, .8, .9, .1, .2, .8)
probs2 <- cbind(weeks_t, e_w, r_e)
row.names(probs2) <- NULL
R <- apply(probs2, 1, prod)
condensed <- c(sum(R[1], R[3]), sum(R[2], R[4]), sum(R[5], R[7]),
sum(R[6], R[8]),sum(R[9], R[11]), sum(R[10], R[12]))
dist_true <- condensed[c(1, 3, 5)]/sum(condensed[c(1, 3, 5)])
dist_false <- condensed[c(2, 4, 6)]/sum(condensed[c(2, 4, 6)])
exp_false <- 1*dist_false[2] + 2*dist_false[3]
dist_true
probs2
R
######## Part 1 ###########
library(xtable)
wt = c(.95, .95, .95, .95)
e = c(.001,.001,.999,.999)
sp = c(.1, .9, .1, .9)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs <- cbind(wt, e, sp, ap, r)
xtable(probs, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
xtable(probs)
wt = c(.02, .02, .02, .02)
e = c(.04,.04,.96,.96)
sp = c(.2, .8, .2, .8)
wt = c(.02, .02, .02, .02)
e = c(.04,.04,.96,.96)
sp = c(.2, .8, .2, .8)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs <- cbind(wt, e, sp, ap, r)
xtable(probs, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
probs_week2 <- cbind(wt, e, sp, ap, r)
wt = c(.02, .02, .02, .02)
e = c(.04,.04,.96,.96)
sp = c(.2, .8, .2, .8)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs_week2 <- cbind(wt, e, sp, ap, r)
xtable(probs_week2, digits=3)
wt = c(.02, .02, .02, .02)
e = c(.04,.04,.96,.96)
sp = c(.2, .8, .2, .8)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs_week2 <- cbind(wt, e, sp, ap, r)
xtable(probs_week2, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
######## Part 1 ###########
library(xtable)
wt = c(.95, .95, .95, .95)
e = c(.001,.001,.999,.999)
sp = c(.1, .9, .1, .9)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs <- cbind(wt, e, sp, ap, r)
xtable(probs, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
### WEEKS = 2 ###
wt = c(.02, .02, .02, .02)
e = c(.04,.04,.96,.96)
sp = c(.2, .8, .2, .8)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs_week2 <- cbind(wt, e, sp, ap, r)
xtable(probs_week2, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
xtable(dist_trye)
xtable(dist_true)
xtable(cbind(c("0", "1", "2")), dist_true)
names = c("Weeks = 2", "Weeks = 1", "Weeks = 2")
cbind(names, dist_true)
rbind(names, dist_true)
dist_true <- condensed[c(1, 3, 5)]/sum(condensed[c(1, 3, 5)])
names = c(0, 1, 2)
cbind(names, dist_true)
rbind(names, dist_true)
dist_true <- condensed[c(1, 3, 5)]/sum(condensed[c(1, 3, 5)])
weeks = c(0, 1, 2)
rbind(weeks, dist_true)
xtable(res, digits=2)
res <- rbind(weeks, dist_true)
xtable(res, digits=2)
xtable(res, digits=3)
weeks_t <- c(.95, .95, .95, .95, .03, .03, .03, .03, .02, .02, .02, .02)
e_w <- c(.001, .001, .999, .999, .02, .02, .98, .98, .04, .04, .96, .96)
r_e <- c(.9, .1, .2, .8, .9, .1, .2, .8, .9, .1, .2, .8)
probs2 <- cbind(weeks_t, e_w, r_e)
row.names(probs2) <- NULL
R <- apply(probs2, 1, prod)
condensed <- c(sum(R[1], R[3]), sum(R[2], R[4]), sum(R[5], R[7]),
sum(R[6], R[8]),sum(R[9], R[11]), sum(R[10], R[12]))
dist_true <- condensed[c(1, 3, 5)]/sum(condensed[c(1, 3, 5)])
weeks = c(0, 1, 2)
res <- rbind(weeks, dist_true)
xtable(res, digits=2)
dist_false <- condensed[c(2, 4, 6)]/sum(condensed[c(2, 4, 6)])
dist_false
exp_false <- 1*dist_false[2] + 2*dist_false[3]
exp_false
######## Part 3 ###########
weeks_t <- c(.95, .95, .95, .95, .03, .03, .03, .03, .02, .02, .02, .02)
e_w <- c(.001, .001, .999, .999, .02, .02, .98, .98, .04, .04, .96, .96)
r_e <- c(.9, .1, .2, .8, .9, .1, .2, .8, .9, .1, .2, .8)
probs2 <- cbind(weeks_t, e_w, r_e)
row.names(probs2) <- NULL
R <- apply(probs2, 1, prod)
condensed <- c(sum(R[1], R[3]), sum(R[2], R[4]), sum(R[5], R[7]),
sum(R[6], R[8]),sum(R[9], R[11]), sum(R[10], R[12]))
dist_true <- condensed[c(1, 3, 5)]/sum(condensed[c(1, 3, 5)])
weeks = c(0, 1, 2)
res <- rbind(weeks, dist_true)
xtable(res, digits=2)
dist_false <- condensed[c(2, 4, 6)]/sum(condensed[c(2, 4, 6)])
exp_false <- 1*dist_false[2] + 2*dist_false[3]
dist_true
######## Part 1 ###########
library(xtable)
wt = c(.95, .95, .95, .95)
e = c(.001,.001,.999,.999)
sp = c(.1, .9, .1, .9)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs <- cbind(wt, e, sp, ap, r)
xtable(probs, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
######## Part 1 ###########
library(xtable)
wt = c(.95, .95, .95, .95)
e = c(.001,.001,.999,.999)
sp = c(.1, .9, .1, .9)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs <- cbind(wt, e, sp, ap, r)
xtable(probs, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
######## Part 1 ###########
library(xtable)
wt = c(.95, .95, .95, .95)
e = c(.001,.001,.999,.999)
sp = c(.1, .9, .1, .9)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs <- cbind(wt, e, sp, ap, r)
xtable(probs, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
probs
wt = c(.02, .02, .02, .02)
e = c(.04,.04,.96,.96)
sp = c(.2, .8, .2, .8)
ap = c(.99, .95, .95, .01)
r = c(.9, .9, .2, .2)
probs_week2 <- cbind(wt, e, sp, ap, r)
xtable(probs_week2, digits=3)
r1=prod(wt[1], e[1], sp[1], ap[1], r[1])
r2=prod(wt[2], e[2], sp[2], ap[2], r[1])
r3=prod(wt[3], e[3], sp[3], ap[3], r[3])
r4=prod(wt[4], e[4], sp[4], ap[4], r[4])
sum(r1, r2)/sum(r1, r2, r3, r4)
sum(r3, r4)/sum(r1, r2, r3, r4)
######## Part 3 ###########
weeks_t <- c(.95, .95, .95, .95, .03, .03, .03, .03, .02, .02, .02, .02)
e_w <- c(.001, .001, .999, .999, .02, .02, .98, .98, .04, .04, .96, .96)
r_e <- c(.9, .1, .2, .8, .9, .1, .2, .8, .9, .1, .2, .8)
probs2 <- cbind(weeks_t, e_w, r_e)
row.names(probs2) <- NULL
R <- apply(probs2, 1, prod)
condensed <- c(sum(R[1], R[3]), sum(R[2], R[4]), sum(R[5], R[7]),
sum(R[6], R[8]),sum(R[9], R[11]), sum(R[10], R[12]))
dist_true <- condensed[c(1, 3, 5)]/sum(condensed[c(1, 3, 5)])
weeks = c(0, 1, 2)
res <- rbind(weeks, dist_true)
xtable(res, digits=2)
dist_false <- condensed[c(2, 4, 6)]/sum(condensed[c(2, 4, 6)])
exp_false <- 1*dist_false[2] + 2*dist_false[3]
dist_true
exp_false
## SET WORKING DIRCTORY ##
setwd("C:/Users/Lee/game_simulation")
## LIBRARIES
library("dplyr")
library("e1071")
library("randomForest")
## READ IN OUR FEATURE DATASETS
data <- read.csv("scripts/rpm_dataset.csv")
data_rpi <- read.csv("scripts/rpi.csv")
## ADD home feature and win/loss column
data <- mutate(data, home = 1)
data$homeWin <- ifelse(data$home_team_score > data$visit_team_score, 1, 0)
## Set up datasets ##
train = filter(data, game_year %in% c(2008, 2009, 2010, 2011))
test = filter(data, game_year == 2012)
years <- c(2008, 2009, 2010, 2011, 2012, 2013)
train = filter(data, game_year %in% c(2008, 2009, 2011, 2012))
test = filter(data, game_year == 2013)
xtest = test[,9:17]
ytest = test[,18]
xtrain = train[,9:17]
ytrain = train[,18]
## Naive Bayes
model <- naiveBayes(xtrain, ytrain)
preds <- as.data.frame(predict(model, xtest, type = c("raw"), threshold = 0.001))
preds$class <- ifelse(preds[,2] > preds[,1], 1, 0)
preds <- cbind(preds, ytest)
preds$result <- abs(preds[,3] - preds[,4])
accuracy <- 1 - sum(preds$result)/length(ytest)
accuracy
## Logistic Regression
mylogit <- glm(homeWin ~ RPM_weight.0 + RPM_weight.1 + PER_weight.0 + PER_weight.1, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
## Linear Regression
mylinear <- lm(homeWin ~ RPM_weight.0 + ORPM_weight.0 + DRPM_weight.0 + PER_weight.0 +
RPM_weight.1 + ORPM_weight.1 + DRPM_weight.1 + PER_weight.1 + home, data=train)
linear_preds <- as.data.frame(predict(mylinear, newdata=xtest, type="response"))
linear_preds$class <- ifelse(linear_preds[,1] >= .5, 1, 0)
linear_preds <- cbind(linear_preds, ytest)
linear_preds$result <- abs(linear_preds[,2] - linear_preds[,3])
linear_accurary <- 1 - sum(linear_preds$result)/length(ytest)
linear_accurary
## Random Forest
rf <- randomForest(homeWin ~ RPM_weight.0 + ORPM_weight.0 + DRPM_weight.0 + PER_weight.0 +
RPM_weight.1 + ORPM_weight.1 + DRPM_weight.1 + PER_weight.1 + home,
data=train, type="classification")
rf_preds <- as.data.frame(predict(rf, xtest))
rf_preds <- cbind(rf_preds, ytest)
rf_preds$class <- ifelse(rf_preds[,1] >= .5, 1, 0)
rf_preds$result <- abs(rf_preds[,2] - rf_preds[,3])
rf_accurary <- 1 - sum(rf_preds$result)/length(ytest)
rf_accurary
importance(rf_preds)
importance(rf)
mylogit <- glm(homeWin ~ RPM_weight.0 + RPM_weight.1 + RPM_weight.0: RPM_weight.1, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
head(data)
train <- mutate(train, RPM_dif = RPM_weight.1 - RPM_weight.0)
head(train)
names(train)
data <- mutate(data, RPM_dif = RPM_weight.1 - RPM_weight.0)
setwd("C:/Users/Lee/game_simulation")
## LIBRARIES
library("dplyr")
library("e1071")
library("randomForest")
## READ IN OUR FEATURE DATASETS
data <- read.csv("scripts/rpm_dataset.csv")
data_rpi <- read.csv("scripts/rpi.csv")
## ADD home feature and win/loss column
data <- mutate(data, home = 1)
data <- mutate(data, RPM_dif = RPM_weight.1 - RPM_weight.0)
data$homeWin <- ifelse(data$home_team_score > data$visit_team_score, 1, 0)
## Set up datasets ##
train = filter(data, game_year %in% c(2008, 2009, 2010, 2011))
test = filter(data, game_year == 2012)
head(train)
## SET WORKING DIRCTORY ##
setwd("C:/Users/Lee/game_simulation")
## LIBRARIES
library("dplyr")
library("e1071")
library("randomForest")
## READ IN OUR FEATURE DATASETS
data <- read.csv("scripts/rpm_dataset.csv")
data_rpi <- read.csv("scripts/rpi.csv")
## ADD home feature and win/loss column
data <- mutate(data, home = 1)
data <- mutate(data, RPM_dif = RPM_weight.1 - RPM_weight.0)
data$homeWin <- ifelse(data$home_team_score > data$visit_team_score, 1, 0)
## Set up datasets ##
train = filter(data, game_year %in% c(2008, 2009, 2010, 2011))
test = filter(data, game_year == 2012)
years <- c(2008, 2009, 2010, 2011, 2012, 2013)
train = filter(data, game_year %in% c(2008, 2009, 2011, 2012))
test = filter(data, game_year == 2013)
xtest = test[,9:18]
ytest = test[,19]
xtrain = train[,9:18]
ytrain = train[,19]
head(xtest)
mylogit <- glm(homeWin ~ RPM_dif, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
summary(mylogit)
train = filter(data, game_year %in% c(2008, 2009, 2010, 2011))
test = filter(data, game_year == 2012)
years <- c(2008, 2009, 2010, 2011, 2012, 2013)
train = filter(data, game_year %in% c(2008))
test = filter(data, game_year == 2009)
xtest = test[,9:18]
ytest = test[,19]
xtrain = train[,9:18]
ytrain = train[,19]
## Naive Bayes
model <- naiveBayes(xtrain, ytrain)
preds <- as.data.frame(predict(model, xtest, type = c("raw"), threshold = 0.001))
preds$class <- ifelse(preds[,2] > preds[,1], 1, 0)
preds <- cbind(preds, ytest)
preds$result <- abs(preds[,3] - preds[,4])
accuracy <- 1 - sum(preds$result)/length(ytest)
accuracy
## Logistic Regression
mylogit <- glm(homeWin ~ RPM_dif, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
train = filter(data, game_year %in% c(2008, 2009, 2010, 2011))
test = filter(data, game_year == 2012)
years <- c(2008, 2009, 2010, 2011, 2012, 2013)
train = filter(data, game_year %in% c(2008, 2009))
test = filter(data, game_year == 2010)
xtest = test[,9:18]
ytest = test[,19]
xtrain = train[,9:18]
ytrain = train[,19]
## Naive Bayes
model <- naiveBayes(xtrain, ytrain)
preds <- as.data.frame(predict(model, xtest, type = c("raw"), threshold = 0.001))
preds$class <- ifelse(preds[,2] > preds[,1], 1, 0)
preds <- cbind(preds, ytest)
preds$result <- abs(preds[,3] - preds[,4])
accuracy <- 1 - sum(preds$result)/length(ytest)
accuracy
## Logistic Regression
mylogit <- glm(homeWin ~ RPM_dif, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
train = filter(data, game_year %in% c(2008, 2009, 2010, 2011))
test = filter(data, game_year == 2012)
years <- c(2008, 2009, 2010, 2011, 2012, 2013)
train = filter(data, game_year %in% c(2008, 2009, 2010))
test = filter(data, game_year == 2011)
xtest = test[,9:18]
ytest = test[,19]
xtrain = train[,9:18]
ytrain = train[,19]
## Naive Bayes
model <- naiveBayes(xtrain, ytrain)
preds <- as.data.frame(predict(model, xtest, type = c("raw"), threshold = 0.001))
preds$class <- ifelse(preds[,2] > preds[,1], 1, 0)
preds <- cbind(preds, ytest)
preds$result <- abs(preds[,3] - preds[,4])
accuracy <- 1 - sum(preds$result)/length(ytest)
accuracy
## Logistic Regression
mylogit <- glm(homeWin ~ RPM_dif, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
years <- c(2008, 2009, 2010, 2011, 2012, 2013)
train = filter(data, game_year %in% c(2008, 2009, 2011))
test = filter(data, game_year == 2012)
xtest = test[,9:18]
ytest = test[,19]
xtrain = train[,9:18]
ytrain = train[,19]
## Naive Bayes
model <- naiveBayes(xtrain, ytrain)
preds <- as.data.frame(predict(model, xtest, type = c("raw"), threshold = 0.001))
preds$class <- ifelse(preds[,2] > preds[,1], 1, 0)
preds <- cbind(preds, ytest)
preds$result <- abs(preds[,3] - preds[,4])
accuracy <- 1 - sum(preds$result)/length(ytest)
accuracy
## Logistic Regression
mylogit <- glm(homeWin ~ RPM_dif, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
data <- mutate(data, home = 1)
data <- mutate(data, RPM_dif = RPM_weight.1 - RPM_weight.0)
data$homeWin <- ifelse(data$home_team_score > data$visit_team_score, 1, 0)
## Set up datasets ##
years <- c(2008, 2009, 2010, 2011, 2012, 2013)
train = filter(data, game_year %in% c(2008, 2009, 2011, 2013))
test = filter(data, game_year == 2013)
xtest = test[,9:18]
ytest = test[,19]
xtrain = train[,9:18]
ytrain = train[,19]
## Naive Bayes
model <- naiveBayes(xtrain, ytrain)
preds <- as.data.frame(predict(model, xtest, type = c("raw"), threshold = 0.001))
preds$class <- ifelse(preds[,2] > preds[,1], 1, 0)
preds <- cbind(preds, ytest)
preds$result <- abs(preds[,3] - preds[,4])
accuracy <- 1 - sum(preds$result)/length(ytest)
accuracy
## Logistic Regression
mylogit <- glm(homeWin ~ RPM_dif, data=train, family = "binomial")
logit_preds <- as.data.frame(predict(mylogit, newdata=xtest, type="response"))
logit_preds$class <- ifelse(logit_preds[,1] >= .5, 1, 0)
logit_preds <- cbind(logit_preds, ytest)
logit_preds$result <- abs(logit_preds[,2] - logit_preds[,3])
logit_accurary <- 1 - sum(logit_preds$result)/length(ytest)
logit_accurary
## Linear Regression
mylinear <- lm(homeWin ~ RPM_weight.0 + ORPM_weight.0 + DRPM_weight.0 + PER_weight.0 +
RPM_weight.1 + ORPM_weight.1 + DRPM_weight.1 + PER_weight.1 + home, data=train)
linear_preds <- as.data.frame(predict(mylinear, newdata=xtest, type="response"))
linear_preds$class <- ifelse(linear_preds[,1] >= .5, 1, 0)
linear_preds <- cbind(linear_preds, ytest)
linear_preds$result <- abs(linear_preds[,2] - linear_preds[,3])
linear_accurary <- 1 - sum(linear_preds$result)/length(ytest)
linear_accurary
## Random Forest
rf <- randomForest(homeWin ~ RPM_weight.0 + ORPM_weight.0 + DRPM_weight.0 + PER_weight.0 +
RPM_weight.1 + ORPM_weight.1 + DRPM_weight.1 + PER_weight.1 + home,
data=train, type="classification")
rf_preds <- as.data.frame(predict(rf, xtest))
rf_preds <- cbind(rf_preds, ytest)
rf_preds$class <- ifelse(rf_preds[,1] >= .5, 1, 0)
rf_preds$result <- abs(rf_preds[,2] - rf_preds[,3])
rf_accurary <- 1 - sum(rf_preds$result)/length(ytest)
rf_accurary
nba_one <- "http://www.nba.com/games/20101201/CHANOH/gameinfo.html"
sample_game <- readLines(nba_one)
head(sample_game)
sample_game
head(sample_game)
sample_game
first_date <- "http://www.nba.com/gameline/20091001/"
head(data)
doc <- htmlPare(sample_game)
library(XML)
doc <- htmlParse(sample_game)
doc
