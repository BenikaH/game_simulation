#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
return (p1)
}
else if ((random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
return (p2)
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
return (p3)
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
return (p4)
}
else  {
return (p5)
}
}
determine_player(.3, .4, .3, .6, .8)
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
random_number <- runif(1)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
print "Player One!"
}
else if ((random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
print "Player Two!"
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
print "Player Three!"
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
print "Player Four!"
}
else  {
print "Player Five!"
}
}
determine_player(.3, .4, .3, .6, .8)
?print
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
random_number <- runif(1)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
print("Player One!")
}
else if ((random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
print("Player Two!")
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
print("Player Three!")
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
print("Player Four!")
}
else  {
print("Player Five!")
}
}
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
print(players_normalized)
random_number <- runif(1)
print(random_number)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
print("Player One!")
}
else if ( (random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
print("Player Two!")
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
print("Player Three!")
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
print("Player Four!")
}
else  {
print("Player Five!")
}
}
determine_player(.3, .4, .3, .6, .8)
.125 + .16666
test <- c(.3, .2, .4, .0)
test[0]
test[1]
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
print(players_normalized)
random_number <- runif(1)
print(random_number)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < players_normalized[1]) {
print("Player One!")
}
else if ((random_number >= players_normalized[1]) & (random_number < (players_normalized[1] + players_normalized[2]))) {
print("Player Two!")
}
else if (random_number >= (players_normalized[1] + players_normalized[2])
& random_number < (players_normalized[1] + players_normalized[2] + players_normalized[3])) {
print("Player Three!")
}
else if (random_number >= players_normalized[1] + players_normalized[2] + players_normalized[3]
& (random_number < players_normalized[1] + players_normalized[2] + players_normalized[3] + players_normalized[4])) {
print("Player Four!")
}
else  {
print("Player Five!")
}
}
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
?read.csv
2013_season <- read.csv("C:\Users\leeri_000\basketball_stats\game_simulation\2013_season.csv". header=TRUE)
2013_season <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv". header=TRUE)
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv". header=TRUE)
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv", header=TRUE)
names(season_2013)
plot(season_2013$FG, season_2013$MP)
lakers <- season_2013[Tm = "LAL",]
lakers <- subset(season_2013, Tm == "LAL")
heat <- subset(season_2013, Tm == "MIA")
lakers
heat
heat[1]
heat[1,]
651-332
nameS(season_2013)
names(season_2013)
attach(season_2013)
X3PA
mean(3PA)
mean(X3PA)
mean(X3PA)
names(season_2013)
total_pos <- X3PA + X2PA + .44*FTA + TOV
mean(total_pos)
cbind(season_2013, total_pos)
season_2013
names(season_2013)
cbind(season_2013, total_pos)
?cbind
season_2013 <- cbind(season_2013, total_pos)
names(season_2013)
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv", header=TRUE)
#Read in the Dataset with all of the individual Player Data
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv", header=TRUE)
attach(season_2013)
#Create individual Player Offensive distributions
total_pos <- X3PA + X2PA + .44*FTA + TOV
three_dist <- X3PA/total_pos
two_dist <- X2PA/total_pos
ft_dist <- .44*FTA/total_pos
tov_dist <- TOV/total_pos
season_2013 <- cbind(season_2013, total_pos, three_dist, two_dist, ft_dist, tov_dist)
max(tota_pos)
max(total_pos)
total_pos
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
#Using the random number, determine the outcome of the game
if (random_number < to_percentage) {
print("Turnover!")
}
else if(random_number >= to_percentage & random_number < to_percentage + two_percentage) {
print("Two Point Shot")
}
else if(random_number >= to_percentage + two_percentage & random_number < to_percentage + two_percentage
+ three percentage){
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
#Using the random number, determine the outcome of the game
if (random_number < to_percentage) {
print("Turnover!")
}
else if(random_number >= to_percentage & random_number < to_percentage + two_percentage) {
print("Two Point Shot")
}
else if(random_number >= to_percentage + two_percentage & random_number < to_percentage + two_percentage + three percentage){
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
#Using the random number, determine the outcome of the game
if (random_number < outcomes_normalized[1]) {
print("Turnover!")
}
else if(random_number >= outcomes_normalized[1] & random_number < outcomes_normalized[1] + outcomes_normalized[2]) {
print("Two Point Shot")
}
else if(random_number >= outcomes_normalized[1] + outcomes_normalized[2] & random_number < outcomes_normalized[1]
+ outcomes_normalized[2] + outcomes_normalized[3]) {
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession(.13, .9, .3, .4)
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
print("random_number")
#Using the random number, determine the outcome of the game
if (random_number < outcomes_normalized[1]) {
print("Turnover!")
}
else if(random_number >= outcomes_normalized[1] & random_number < outcomes_normalized[1] + outcomes_normalized[2]) {
print("Two Point Shot")
}
else if(random_number >= outcomes_normalized[1] + outcomes_normalized[2] & random_number < outcomes_normalized[1]
+ outcomes_normalized[2] + outcomes_normalized[3]) {
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession(.13, .9, .3, .4)
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
print(random_number)
#Using the random number, determine the outcome of the game
if (random_number < outcomes_normalized[1]) {
print("Turnover!")
}
else if(random_number >= outcomes_normalized[1] & random_number < outcomes_normalized[1] + outcomes_normalized[2]) {
print("Two Point Shot")
}
else if(random_number >= outcomes_normalized[1] + outcomes_normalized[2] & random_number < outcomes_normalized[1]
+ outcomes_normalized[2] + outcomes_normalized[3]) {
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession(.13, .9, .3, .4)
player_possession(.13, .9, .3, .4)
player_possession(.13, .9, .3, .4)
args(rnorm)
help.search("rnorm")
args(runif)
runif
?gbm
?kernlab
pwd
pwd
ls
a <- available packages()
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("ggplot2", "devtools")
library("ggplot2")
library(ggplot2)
search()
library(xts)
library(RCurl)
library(XML)
######### GET DATA #############
d1 = data.frame()
for(i in 1:30){
theurl <- paste("http://thegradcafe.com/survey/index.php?q=statistics&t=a&pp=250&o=&p=",i, sep="")
tables <- readHTMLTable(theurl)
tables = tables[[1]]
tables = data.frame(tables$Institution, tables$"Date Added", tables$"Decision & Date")
tables = tables[-1,]
d1 = rbind(d1, tables )
print(i)
if(nrow(tables)<250) break
}
names(d1) = c("Institution","Date Added" ,"Decision & Date")
d1
d2 = as.Date(d[,2],format='%d %b %Y')
d2 = as.Date(d1[,2],format='%d %b %Y')
data.range = seq(min(d2), max(d2), by="days")
tables
accept = d[grep("accepted", tolower(d$"Decision & Date")),]
reject = d[grep("rejected", tolower(d$"Decision & Date")),]
wait = d[grep("wait listed", tolower(d$"Decision & Date")),]
accept.totals = table(as.Date(accept$"Date Added",format='%d %b %Y') )
reject.totals = table(as.Date(reject$"Date Added",format='%d %b %Y') )
wait.totals = table(as.Date(wait$"Date Added",format='%d %b %Y') )
accept = d[grep("accepted", tolower(d1$"Decision & Date")),]
reject = d[grep("rejected", tolower(d1$"Decision & Date")),]
accept = d1[grep("accepted", tolower(d1$"Decision & Date")),]
reject = d1[grep("rejected", tolower(d1$"Decision & Date")),]
wait = d1[grep("wait listed", tolower(d1$"Decision & Date")),]
accept
accept.totals = table(as.Date(accept$"Date Added",format='%d %b %Y') )
reject.totals = table(as.Date(reject$"Date Added",format='%d %b %Y') )
wait.totals = table(as.Date(wait$"Date Added",format='%d %b %Y') )
accept.totals
getwd()
setwd("C:/Users/leeri_000/basketball_stats//game_simulation"
)
getwd()
ls
#Read in the Teams Dataset
source("teams.R")
source("two_point_shot.R")
#Initialize the Box Score to all 0's
box_score <- as.data.frame(matrix(0, nrow=9, ncol=10))
#Name the data frame that will be collecting all of the results
colnames(box_score) <- c("HP1", "HP2", "HP3", "HP4", "HP5", "AP1", "AP2", "AP3", "AP4", "AP5")
rownames(box_score) <- c("2M", "2A", "3M", "3A", "FTM", "FTA", "TO", "OREB", "DREB")
#Read in the input data which sets the parameters for the game
team1 <- lakers_input
team2 <- heat_input
#Read in the Dataset with all of the individual Player Data
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/data/2013_season.csv", header=TRUE)
attach(season_2013)
devtools::install_packages("hadley/github")
f <- function(x) x^3
f
environment(f)
formals(f)
body(f)
source("determine_event.R")
#Read in all of the functions that will be needed for the game
source("teams.R")
source("two_point_shot.R")
source("determine_event.R")
source("determine_player.R")
source("free_throw.R")
source("rebound.R")
source("three_point_shot.R")
getwd()
#Read in all of the functions that will be needed for the game
source("functions/teams.R")
source("functions/two_point_shot.R")
source("functions/determine_event.R")
source("functions/determine_player.R")
source("functions/free_throw.R")
source("functions/rebound.R")
source("functions/three_point_shot.R")
#Read in all of the functions that will be needed for the game
source("functions/teams.R")
source("functions/two_point_shot.R")
source("functions/determine_event.R")
source("functions/determine_player.R")
source("functions/free_throw.R")
source("functions/rebound.R")
source("functions/three_point_shot.R")
#Read in the Dataset with all of the individual Player Data
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/data/2013_season.csv", header=TRUE)
attach(season_2013)
#Create individual Player Offensive distributions
total_pos <- X3PA + X2PA + .44*FTA + TOV
three_dist <- X3PA/total_pos
two_dist <- X2PA/total_pos
ft_dist <- .44*FTA/total_pos
tov_dist <- TOV/total_pos
season_2013 <- cbind(season_2013, total_pos, three_dist, two_dist, ft_dist, tov_dist)
lakers <- subset(season_2013, Tm == "LAL")
lakers_ordered <- lakers[order(lakers[,"MP"], decreasing=TRUE),]
heat <- subset(season_2013, Tm == "MIA")
heat_ordered <- heat[order(heat[,"MP"], decreasing=TRUE),]
lakers_five <- lakers_ordered[1:5,]
heat_five <- heat_ordered[1:5,]
#Keep only the inputs that will matter in the game
lakers_input <- lakers_five[,c("Player", "X3P.", "X2P.", "FT.", "USG.", "DRB.", "ORB.", "three_dist", "two_dist", "ft_dist", "tov_dist")]
heat_input <- heat_five[,c("Player", "X3P.", "X2P.", "FT.", "USG.", "DRB.", "ORB.", "three_dist", "two_dist", "ft_dist", "tov_dist")]
#Initialize the Box Score to all 0's
box_score <- as.data.frame(matrix(0, nrow=9, ncol=10))
#Name the data frame that will be collecting all of the results
colnames(box_score) <- c("HP1", "HP2", "HP3", "HP4", "HP5", "AP1", "AP2", "AP3", "AP4", "AP5")
rownames(box_score) <- c("2M", "2A", "3M", "3A", "FTM", "FTA", "TO", "OREB", "DREB")
#Read in the input data which sets the parameters for the game
team1 <- lakers_input
team2 <- heat_input
#Read in all of the functions that will be needed for the game
#Generate home and away team's rebounding percentages
team1_oreb <- sum(team1[,"ORB."])
team1_dreb <-sum(team1[,"DRB."])
team2_oreb <- sum(team2[,"ORB."])
team2_dreb <-sum(team2[,"DRB."])
num_pos <- 100
#Simulate Home Team's Possessions
for(i in 1:num_pos) {
print("Possession" + i)
}
#Simulate Home Team's Possessions
for(i in 1:num_pos) {
print("Possession" + string(i))
}
#Simulate Home Team's Possessions
for(i in 1:num_pos) {
print("Possession" + character(i))
}
#Simulate Home Team's Possessions
for(i in 1:num_pos) {
print("Possession" + as.character(i))
}
for(i in 1:num_pos) {
print(i)
}
?capture.output
for(i in 1:num_pos) {
capture.output(cat("Possession", i))
}
for(i in 1:num_pos) {
print(capture.output(cat("Possession", i)))
}
#Read in all of the functions that will be needed for the game
source("functions/teams.R")
source("functions/two_point_shot.R")
source("functions/determine_event.R")
source("functions/determine_player.R")
source("functions/free_throw.R")
source("functions/rebound.R")
source("functions/three_point_shot.R")
#Initialize the Box Score to all 0's
box_score <- as.data.frame(matrix(0, nrow=9, ncol=10))
#Name the data frame that will be collecting all of the results
colnames(box_score) <- c("HP1", "HP2", "HP3", "HP4", "HP5", "AP1", "AP2", "AP3", "AP4", "AP5")
rownames(box_score) <- c("2M", "2A", "3M", "3A", "FTM", "FTA", "TO", "OREB", "DREB")
#Read in the input data which sets the parameters for the game
team1 <- lakers_input
team2 <- heat_input
#Generate home and away team's rebounding percentages
team1_oreb <- sum(team1[,"ORB."])
team1_dreb <-sum(team1[,"DRB."])
team2_oreb <- sum(team2[,"ORB."])
team2_dreb <-sum(team2[,"DRB."])
#Determine the number of possessions
num_pos <- 100
#Simulate Home Team's Possessions
for(i in 1:num_pos) {
#Display the Possession Numberss
print(capture.output(cat("Possession", i)))
}
#Simulate Away Team's Possessions
#Simulate Home Team's Possessions
for(i in 1:num_pos) {
#Display the Possession Numberss
print(capture.output(cat("Home Possession", i)))
}
#Simulate Away Team's Possessions
for(i in 1:num_pos) {
#Display the Possession Numberss
print(capture.output(cat("Away Possession", i)))
}
team1_oreb
team2_oreb
team2_dreb
team1_dreb
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
devtools::build_github_devtools()
install.packages("devtools")
install.packages("devtools")
devtools::install_packages("hadley/github")
.libPaths()
