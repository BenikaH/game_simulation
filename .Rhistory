if random_number < p1_usage {
return p1
}
else if (random_number >= p1_usage & random_number < (p1_usage + p2_usage)) {
return p2
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
return p3
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
return p4
}
else  {
return p5
}
}
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
random_number <- runif(1)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
return p1
}
else if (random_number >= p1_usage & random_number < (p1_usage + p2_usage)) {
return p2
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
return p3
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
return p4
}
else  {
return p5
}
}
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
random_number <- runif(1)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
return (p1)
}
else if ((random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
return (p2)
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
return (p3)
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
return (p4)
}
else  {
return (p5)
}
}
determine_player(.3, .4, .3, .6, .8)
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
random_number <- runif(1)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
print "Player One!"
}
else if ((random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
print "Player Two!"
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
print "Player Three!"
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
print "Player Four!"
}
else  {
print "Player Five!"
}
}
determine_player(.3, .4, .3, .6, .8)
?print
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
random_number <- runif(1)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
print("Player One!")
}
else if ((random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
print("Player Two!")
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
print("Player Three!")
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
print("Player Four!")
}
else  {
print("Player Five!")
}
}
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
print(players_normalized)
random_number <- runif(1)
print(random_number)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < p1_usage) {
print("Player One!")
}
else if ( (random_number >= p1_usage) & (random_number < (p1_usage + p2_usage))) {
print("Player Two!")
}
else if (random_number >= (p1_usage + p2_usage) & random_number < (p1_usage + p2_usage + p3_usage)) {
print("Player Three!")
}
else if (random_number >= p1_usage + p2_usage + p3_usage & random_number < p1_usage + p2_usage + p3_usage + p4_usage) {
print("Player Four!")
}
else  {
print("Player Five!")
}
}
determine_player(.3, .4, .3, .6, .8)
.125 + .16666
test <- c(.3, .2, .4, .0)
test[0]
test[1]
determine_player <- function(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage) {
#Squeeze the usage rates so they will add up to one
players <- c(p1_usage, p2_usage, p3_usage, p4_usage, p5_usage)
players_normalized <- players/sum(players)
print(players_normalized)
random_number <- runif(1)
print(random_number)
#Using a Random Number and the scaled usage rates, determine which player will use the possession
if (random_number < players_normalized[1]) {
print("Player One!")
}
else if ((random_number >= players_normalized[1]) & (random_number < (players_normalized[1] + players_normalized[2]))) {
print("Player Two!")
}
else if (random_number >= (players_normalized[1] + players_normalized[2])
& random_number < (players_normalized[1] + players_normalized[2] + players_normalized[3])) {
print("Player Three!")
}
else if (random_number >= players_normalized[1] + players_normalized[2] + players_normalized[3]
& (random_number < players_normalized[1] + players_normalized[2] + players_normalized[3] + players_normalized[4])) {
print("Player Four!")
}
else  {
print("Player Five!")
}
}
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
determine_player(.3, .4, .3, .6, .8)
?read.csv
2013_season <- read.csv("C:\Users\leeri_000\basketball_stats\game_simulation\2013_season.csv". header=TRUE)
2013_season <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv". header=TRUE)
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv". header=TRUE)
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv", header=TRUE)
names(season_2013)
plot(season_2013$FG, season_2013$MP)
lakers <- season_2013[Tm = "LAL",]
lakers <- subset(season_2013, Tm == "LAL")
heat <- subset(season_2013, Tm == "MIA")
lakers
heat
heat[1]
heat[1,]
651-332
nameS(season_2013)
names(season_2013)
attach(season_2013)
X3PA
mean(3PA)
mean(X3PA)
mean(X3PA)
names(season_2013)
total_pos <- X3PA + X2PA + .44*FTA + TOV
mean(total_pos)
cbind(season_2013, total_pos)
season_2013
names(season_2013)
cbind(season_2013, total_pos)
?cbind
season_2013 <- cbind(season_2013, total_pos)
names(season_2013)
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv", header=TRUE)
#Read in the Dataset with all of the individual Player Data
season_2013 <- read.csv("C:/Users/leeri_000/basketball_stats/game_simulation/2013_season.csv", header=TRUE)
attach(season_2013)
#Create individual Player Offensive distributions
total_pos <- X3PA + X2PA + .44*FTA + TOV
three_dist <- X3PA/total_pos
two_dist <- X2PA/total_pos
ft_dist <- .44*FTA/total_pos
tov_dist <- TOV/total_pos
season_2013 <- cbind(season_2013, total_pos, three_dist, two_dist, ft_dist, tov_dist)
max(tota_pos)
max(total_pos)
total_pos
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
#Using the random number, determine the outcome of the game
if (random_number < to_percentage) {
print("Turnover!")
}
else if(random_number >= to_percentage & random_number < to_percentage + two_percentage) {
print("Two Point Shot")
}
else if(random_number >= to_percentage + two_percentage & random_number < to_percentage + two_percentage
+ three percentage){
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
#Using the random number, determine the outcome of the game
if (random_number < to_percentage) {
print("Turnover!")
}
else if(random_number >= to_percentage & random_number < to_percentage + two_percentage) {
print("Two Point Shot")
}
else if(random_number >= to_percentage + two_percentage & random_number < to_percentage + two_percentage + three percentage){
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
#Using the random number, determine the outcome of the game
if (random_number < outcomes_normalized[1]) {
print("Turnover!")
}
else if(random_number >= outcomes_normalized[1] & random_number < outcomes_normalized[1] + outcomes_normalized[2]) {
print("Two Point Shot")
}
else if(random_number >= outcomes_normalized[1] + outcomes_normalized[2] & random_number < outcomes_normalized[1]
+ outcomes_normalized[2] + outcomes_normalized[3]) {
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession(.13, .9, .3, .4)
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
print("random_number")
#Using the random number, determine the outcome of the game
if (random_number < outcomes_normalized[1]) {
print("Turnover!")
}
else if(random_number >= outcomes_normalized[1] & random_number < outcomes_normalized[1] + outcomes_normalized[2]) {
print("Two Point Shot")
}
else if(random_number >= outcomes_normalized[1] + outcomes_normalized[2] & random_number < outcomes_normalized[1]
+ outcomes_normalized[2] + outcomes_normalized[3]) {
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession(.13, .9, .3, .4)
player_possession <- function(to_percentage, two_percentage, ft_percentage, three_percentage) {
#Normalize the four different outcomes, and Generate a random number which will determine the outcome
#of the individual possession
outcomes <- c(to_percentage, two_percentage, ft_percentage, three_percentage)
outcomes_normalized <- outcomes/sum(outcomes)
print(outcomes_normalized)
random_number <- runif(1)
print(random_number)
#Using the random number, determine the outcome of the game
if (random_number < outcomes_normalized[1]) {
print("Turnover!")
}
else if(random_number >= outcomes_normalized[1] & random_number < outcomes_normalized[1] + outcomes_normalized[2]) {
print("Two Point Shot")
}
else if(random_number >= outcomes_normalized[1] + outcomes_normalized[2] & random_number < outcomes_normalized[1]
+ outcomes_normalized[2] + outcomes_normalized[3]) {
print("Three Point Shot!")
}
else {
print("Free Throws!")
}
}
player_possession(.13, .9, .3, .4)
player_possession(.13, .9, .3, .4)
player_possession(.13, .9, .3, .4)
args(rnorm)
help.search("rnorm")
args(runif)
runif
?gbm
?kernlab
pwd
pwd
ls
a <- available packages()
a <- available.packages()
head(rownames(a),3)
install.packages("slidify")
install.packages("ggplot2", "devtools")
library("ggplot2")
library(ggplot2)
search()
library(xts)
library(RCurl)
library(XML)
######### GET DATA #############
d1 = data.frame()
for(i in 1:30){
theurl <- paste("http://thegradcafe.com/survey/index.php?q=statistics&t=a&pp=250&o=&p=",i, sep="")
tables <- readHTMLTable(theurl)
tables = tables[[1]]
tables = data.frame(tables$Institution, tables$"Date Added", tables$"Decision & Date")
tables = tables[-1,]
d1 = rbind(d1, tables )
print(i)
if(nrow(tables)<250) break
}
names(d1) = c("Institution","Date Added" ,"Decision & Date")
d1
d2 = as.Date(d[,2],format='%d %b %Y')
d2 = as.Date(d1[,2],format='%d %b %Y')
data.range = seq(min(d2), max(d2), by="days")
tables
accept = d[grep("accepted", tolower(d$"Decision & Date")),]
reject = d[grep("rejected", tolower(d$"Decision & Date")),]
wait = d[grep("wait listed", tolower(d$"Decision & Date")),]
accept.totals = table(as.Date(accept$"Date Added",format='%d %b %Y') )
reject.totals = table(as.Date(reject$"Date Added",format='%d %b %Y') )
wait.totals = table(as.Date(wait$"Date Added",format='%d %b %Y') )
accept = d[grep("accepted", tolower(d1$"Decision & Date")),]
reject = d[grep("rejected", tolower(d1$"Decision & Date")),]
accept = d1[grep("accepted", tolower(d1$"Decision & Date")),]
reject = d1[grep("rejected", tolower(d1$"Decision & Date")),]
wait = d1[grep("wait listed", tolower(d1$"Decision & Date")),]
accept
accept.totals = table(as.Date(accept$"Date Added",format='%d %b %Y') )
reject.totals = table(as.Date(reject$"Date Added",format='%d %b %Y') )
wait.totals = table(as.Date(wait$"Date Added",format='%d %b %Y') )
accept.totals
#Load all of the Necesary Packages
require(plyr)
#Read in the Dataset with all of the individual Player Data
all_seasons <- read.csv("data/all_data.csv", header=TRUE)
season_2013 <- read.csv("data/2013_season.csv", header=TRUE)
rpm_data <- read.csv("data/RPM_data.csv", header=TRUE)
#Merge the rpm data onto all of the Player Data
merged_data <- merge(all_seasons, rpm_data, by = c("Player", "year"), all.x = TRUE)
#Create the Minutes Per Game Variable
merged_data$MPG <- merged_data$MP/merged_data$G
getwd()
setwd("C:/Users/leeri_000//basketball_stats/game_simulation")
getwd()
#Load all of the Necesary Packages
require(plyr)
#Read in the Dataset with all of the individual Player Data
all_seasons <- read.csv("data/all_data.csv", header=TRUE)
season_2013 <- read.csv("data/2013_season.csv", header=TRUE)
rpm_data <- read.csv("data/RPM_data.csv", header=TRUE)
#Merge the rpm data onto all of the Player Data
merged_data <- merge(all_seasons, rpm_data, by = c("Player", "year"), all.x = TRUE)
head(merged_data)
tail(merged_data)
#Create the Minutes Per Game Variable
merged_data$MPG <- merged_data$MP/merged_data$G
#Create individual Player Offensive distributions
merged_data$total_pos <- merged_data$X3PA + merged_data$X2PA + .44*merged_data$FTA + merged_data$TOV
merged_data$three_dist <- merged_data$X3PA/merged_data$total_pos
merged_data$two_dist <- merged_data$X2PA/merged_data$total_pos
merged_data$ft_dist <- .44*merged_data$FTA/merged_data$total_pos
merged_data$tov_dist <- merged_data$TOV/merged_data$total_pos
merged_data <- rename(merged_data, replace=c("X3P."= "three_perc",
"X2P."= "two_perc","FT."= "ft_perc",
"DRB."="indv_drb","ORB."= "indv_orb", "USG."="usage"))
#Grab the names of the variables to scale, and then scale them by 100
df <- merged_data[,c("indv_orb", "indv_drb", "TRB.", "AST.", "STL.", "BLK.", "TOV.", "usage")]
for(i in names(df)){
merged_data[[i]] <- merged_data[[i]]/100
}
tail(merged_data)
write.csv(merged_data, file = "data/input_data.csv")
#Create a team that represents the 2014 Lakers and 2014 Heat
team1 <- "LAL"
team2 <- "MIA"
year_of_game <- 2013
team1 <- subset(merged_data, Tm == team1 & year == year_of_game & MP >= 500)
dim(team1)
team1
totals_min <- sum(team1$MPG)
team1$possession_probability <- team1$MPG/totals_min
possession_five_team1 <- team1[sample(nrow(team1), size=5, prob=team1$possession_probability),]
possession_five_team1
possession_five_team1 <- team1[sample(nrow(team1), size=5, prob=team1$possession_probability),]
possession_five_team1
team2 <- subset(merged_data, Tm == team2 & year == year_of_game & MP >= 500)
totals_min <- sum(team2$MPG)
team2$possession_probability <- team2$MPG/totals_min
possession_five_team2 <- team2[sample(nrow(team2), size=5, prob=team2$possession_probability),]
possession_five_team2
game <- function(team_one, team_two, year_one, year_two) {
#Read in all of the functions that will be needed for the game
#source("functions/teams.R")
source("functions/determine_event.R")
source("functions/determine_player.R")
source("functions/free_throw.R")
source("functions/two_point_shot.R")
source("functions/three_point_shot.R")
source("functions/rebound.R")
source("functions/determine_rebounder.R")
#Using inputs, read in the players who will be on each team
team1 <- subset(input_dataset, Tm == team_one & year == year_one & MP >= 500)
team2 <- subset(input_dataset, Tm == team_two & year == year_two & MP >= 500)
#Based on the number of players on each team, count how many players will be in the box score
num_rows <- nrow(team1) + nrow(team2)
print(c(team1$Player, team2$Player))
#Initialize the Box Score to all 0's
box_score <- as.data.frame(matrix(0, nrow=num_rows, ncol=10))
box_score
#   #Name the data frame that will be collecting all of the results
#   colnames(box_score) <- c("team1_1", "team1_2", "team1_3", "team1_4", "team1_5",
#                            "team2_1", "team2_2", "team2_3", "team2_4", "team2_5")
#   rownames(box_score) <- c("2M", "2A", "3M", "3A", "FTM", "FTA", "TO", "OREB", "DREB")
#   totals_min <- sum(team1$MPG)
#   team1$possession_probability <- team1$MPG/totals_min
#   possession_five_team1 <- team1[sample(nrow(team1), size=5, prob=team1$possession_probability),]
}
game("LAL", "MIA", 2013, 2013)
game <- function(team_one, team_two, year_one, year_two) {
#Read in all of the functions that will be needed for the game
#source("functions/teams.R")
source("functions/determine_event.R")
source("functions/determine_player.R")
source("functions/free_throw.R")
source("functions/two_point_shot.R")
source("functions/three_point_shot.R")
source("functions/rebound.R")
source("functions/determine_rebounder.R")
#Using inputs, read in the players who will be on each team
team1 <- subset(merged_data, Tm == team_one & year == year_one & MP >= 500)
team2 <- subset(merged_data, Tm == team_two & year == year_two & MP >= 500)
#Based on the number of players on each team, count how many players will be in the box score
num_rows <- nrow(team1) + nrow(team2)
print(c(team1$Player, team2$Player))
#Initialize the Box Score to all 0's
box_score <- as.data.frame(matrix(0, nrow=num_rows, ncol=10))
box_score
#   #Name the data frame that will be collecting all of the results
#   colnames(box_score) <- c("team1_1", "team1_2", "team1_3", "team1_4", "team1_5",
#                            "team2_1", "team2_2", "team2_3", "team2_4", "team2_5")
#   rownames(box_score) <- c("2M", "2A", "3M", "3A", "FTM", "FTA", "TO", "OREB", "DREB")
#   totals_min <- sum(team1$MPG)
#   team1$possession_probability <- team1$MPG/totals_min
#   possession_five_team1 <- team1[sample(nrow(team1), size=5, prob=team1$possession_probability),]
}
#Testing the game
game("LAL", "MIA", 2013, 2013)
names(merged_data)
head(merged_data)
