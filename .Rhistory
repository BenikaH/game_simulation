x2 <- cosine_basis(2, Xnew)
x3 <- cosine_basis(3, Xnew)
x4 <- cosine_basis(4, Xnew)
x5 <- cosine_basis(5, Xnew)
x6 <- cosine_basis(6, Xnew)
ufcwc <- cbind(ufcwc, x0, x1, x2, x3, x4, x5, x6)
## Cost Function
cost = function(y, predy){
err = mean( (y-predy)^2 )
return(err)
}
## Get the fits
mod0 <- glm(Height ~ x0, family=gaussian(link="identity"), data=ufcwc)
mod1 <- glm(Height ~ x0+x1, family=gaussian(link="identity"), data=ufcwc)
mod2 <- glm(Height ~ x0+x1+x2, family=gaussian(link="identity"), data=ufcwc)
mod3 <- glm(Height ~ x0+x1+x3, family=gaussian(link="identity"), data=ufcwc)
mod4 <- glm(Height ~ x0+x1+x3+x4, family=gaussian(link="identity"), data=ufcwc)
mod5 <- glm(Height ~ x0+x1+x3+x4+x5, family=gaussian(link="identity"), data=ufcwc)
mod6 <- glm(Height ~ x0+x1+x3+x4+x5+x6, family=gaussian(link="identity"), data=ufcwc)
ufcwc
data(ufcwc)
library(alr3)
data(ufcwc)
Y = ufcwc$Height
X = ufcwc$Dbh
n = length(Xnew)
Xnew <- (X-min(X))/(max(X)-min(X))
x0 <- rep(1, n)
## Function to compute the cosine basis
cosine_basis <- function(j,x){
inside <- (j*pi*x)
cos(inside)*sqrt(2)
}
# Get the rest of the covariates
x1 <- cosine_basis(1, Xnew)
x2 <- cosine_basis(2, Xnew)
x3 <- cosine_basis(3, Xnew)
x4 <- cosine_basis(4, Xnew)
x5 <- cosine_basis(5, Xnew)
x6 <- cosine_basis(6, Xnew)
ufcwc <- cbind(ufcwc, x0, x1, x2, x3, x4, x5, x6)
## Cost Function
cost = function(y, predy){
err = mean( (y-predy)^2 )
return(err)
}
## Get the fits
mod0 <- glm(Height ~ x0, family=gaussian(link="identity"), data=ufcwc)
mod1 <- glm(Height ~ x0+x1, family=gaussian(link="identity"), data=ufcwc)
mod2 <- glm(Height ~ x0+x1+x2, family=gaussian(link="identity"), data=ufcwc)
mod3 <- glm(Height ~ x0+x1+x3, family=gaussian(link="identity"), data=ufcwc)
mod4 <- glm(Height ~ x0+x1+x3+x4, family=gaussian(link="identity"), data=ufcwc)
mod5 <- glm(Height ~ x0+x1+x3+x4+x5, family=gaussian(link="identity"), data=ufcwc)
mod6 <- glm(Height ~ x0+x1+x3+x4+x5+x6, family=gaussian(link="identity"), data=ufcwc)
cv.glm(data=ufcwc, cost=cost, glmfit=mod0, K=4)
cv.glm(data=ufcwc, mod0, cost=cost, K=4)
names(cv.glm(data=ufcwc, mod0, cost=cost, K=4))
cv.glm(data=ufcwc, mod0, cost=cost, K=4)$delta
cv.glm(data=ufcwc, mod0, cost=cost, K=4)$K
j=1
modj
rm(f)
rm()
rm(j)
cv.glm(data=ufcwc, mod0, cost=cost, K=3)
mod0_fit <- cv.glm(data=ufcwc, mod0, cost=cost, K=3)$delta[1]
mod0_fit <- cv.glm(data=ufcwc, mod0, cost=cost, K=3)$delta[1]## Order Results
mod0_fit <- cv.glm(data=ufcwc, mod0, cost=cost, K=3)$delta[1]
mod1_fit <- cv.glm(data=ufcwc, mod1, cost=cost, K=3)$delta[1]
mod2_fit <- cv.glm(data=ufcwc, mod2, cost=cost, K=3)$delta[1]
mod3_fit <- cv.glm(data=ufcwc, mod3, cost=cost, K=3)$delta[1]
mod4_fit <- cv.glm(data=ufcwc, mod4, cost=cost, K=3)$delta[1]
mod5_fit <- cv.glm(data=ufcwc, mod5, cost=cost, K=3)$delta[1]
mod6_fit <- cv.glm(data=ufcwc, mod6, cost=cost, K=3)$delta[1]
scores <- c(mod0_fit, mod1_fit, mod2_fit, mod3_fit, mod4_fit, mod5_fit, mod6_fit, mod7_fit)
scores <- c(mod0_fit, mod1_fit, mod2_fit, mod3_fit, mod4_fit, mod5_fit, mod6_fit)
scores
plot(scores)
min(scores)
foo = order(Xnew)
x_ord <- X[foo]
y_ord <- Y[foo]
data(ufcwc)
Y = ufcwc$Height
X = ufcwc$Dbh
n = length(Xnew)
Xnew <- (X-min(X))/(max(X)-min(X))
x0 <- rep(1, n)
## Function to compute the cosine basis
cosine_basis <- function(j,x){
inside <- (j*pi*x)
cos(inside)*sqrt(2)
}
# Get the rest of the covariates
x1 <- cosine_basis(1, Xnew)
x2 <- cosine_basis(2, Xnew)
x3 <- cosine_basis(3, Xnew)
x4 <- cosine_basis(4, Xnew)
x5 <- cosine_basis(5, Xnew)
x6 <- cosine_basis(6, Xnew)
ufcwc <- cbind(ufcwc, x0, x1, x2, x3, x4, x5, x6)
## Cost Function
cost = function(y, predy){
err = mean( (y-predy)^2 )
return(err)
}
## Get the fits
mod0 <- glm(Height ~ x0, family=gaussian(link="identity"), data=ufcwc)
mod1 <- glm(Height ~ x0+x1, family=gaussian(link="identity"), data=ufcwc)
mod2 <- glm(Height ~ x0+x1+x2, family=gaussian(link="identity"), data=ufcwc)
mod3 <- glm(Height ~ x0+x1+x3, family=gaussian(link="identity"), data=ufcwc)
mod4 <- glm(Height ~ x0+x1+x3+x4, family=gaussian(link="identity"), data=ufcwc)
mod5 <- glm(Height ~ x0+x1+x3+x4+x5, family=gaussian(link="identity"), data=ufcwc)
mod6 <- glm(Height ~ x0+x1+x3+x4+x5+x6, family=gaussian(link="identity"), data=ufcwc)
## Get CV score
mod0_fit <- cv.glm(data=ufcwc, mod0, cost=cost, K=3)$delta[1]
mod1_fit <- cv.glm(data=ufcwc, mod1, cost=cost, K=3)$delta[1]
mod2_fit <- cv.glm(data=ufcwc, mod2, cost=cost, K=3)$delta[1]
mod3_fit <- cv.glm(data=ufcwc, mod3, cost=cost, K=3)$delta[1]
mod4_fit <- cv.glm(data=ufcwc, mod4, cost=cost, K=3)$delta[1]
mod5_fit <- cv.glm(data=ufcwc, mod5, cost=cost, K=3)$delta[1]
mod6_fit <- cv.glm(data=ufcwc, mod6, cost=cost, K=3)$delta[1]
## Compare scores
scores <- c(mod0_fit, mod1_fit, mod2_fit, mod3_fit, mod4_fit, mod5_fit, mod6_fit)
## Order Results
foo = order(Xnew)
x_ord <- X[foo]
y_ord <- Y[foo]
plot(Xnew, Y)
lines(x_ord, fitted(mod6)[foo])
foo = order(Xnew)
x_ord <- Xnew[foo]
y_ord <- Y[foo]
plot(Xnew, Y)
lines(x_ord, fitted(mod6)[foo])
library(XML)
first_date <- "http://www.nba.com/gameline/20091001/"
## Link to where the data is
nba_one <- "http://www.nba.com/games/20101201/CHANOH/gameinfo.html"
sample_game <- readLines(nba_one)
doc <- htmlParse(sample_game)
doc
##################################################################
## Download all of the raw game play by play files from NBA.com ##
##################################################################
library(XML)
first_date <- "http://www.nba.com/gameline/20091001/"
## Link to where the data is
nba_one <- "http://www.nba.com/games/20101201/CHANOH/gameinfo.html"
sample_game <- readLines(nba_one)
doc <- htmlParse(sample_game)
doc
doc <- xmlParse(sample_game)
doc
names(doc)
first_date <- "http://www.nba.com/gameline/20091001/"
doc <- xmlParse(first_date)
doc
names(doc)
doc <- xmlParse(first_date, isHTML=TRUE)
class(doc)
doc <- htmlTreeParse(first_date, isHTML=TRUE)
doc
names(doc)
doc$file
class(doc)
doc <- htmlParse(first_date, isHTML=TRUE)
class(doc)
names(doc)
doc
xmlRoot(doc)
child_doc <- xmlChildren(doc)
class(child_doc)
names(class_doc)
names(child_doc)
child_doc$html
child_doc$comment
links <- xpathSApply(doc, "//a/@href")
links
?xpathSApply
links <- getNodeSet(doc, "//a/@href")
links
links <- getNodeSet(doc)
game_links <- xpathSApply(doc, "gameInfo")
game_links
game_links <- xpathSApply(doc, "gameinfo")
game_links <- xpathSApply(doc, "//a/@href")
library(XML)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091001/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- xpathSApply(doc, "//a/@href")
free(game_links)
install.packages("RCurl")
library(RCurl)
####################################################################
## Download all of the raw game play by play files from NBA.com ####
####################################################################
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091001/"
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- xpathSApply(doc, "//a/@href")
game_links <- strsplit(doc,"a href=")
####################################################################
## Download all of the raw game play by play files from NBA.com ####
####################################################################
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091001/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- strsplit(doc,"a href=")
game_links <- strsplit(doc,"a href=")[[1]]
query = '//div[@class="nbaFnlMnRecapDiv"]'
xpathSApply(xml, query, xmlValue)
xpathSApply(doc, query, xmlValue)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091001/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
query = '//div[@class="nbaFnlMnRecapDiv"]'
xpathSApply(doc, query, xmlValue)
game_links <- xpathSApply(fifa.doc, "//*/div[@class='nbaFnlMnRecapDiv']", xmlValue)
game_links <- xpathSApply(doc, "//*/div[@class='nbaFnlMnRecapDiv']", xmlValue)
game_links
game_links <- xpathSApply(doc, "//*//*/div[@class='nbaFnlMnRecapDiv']", xmlValue)
game_links <- xpathSApply(doc, "//*//*//*/div[@class='nbaFnlMnRecapDiv']", xmlValue)
game_links <- xpathSApply(doc, "//*//*//*//*/div[@class='nbaFnlMnRecapDiv']", xmlValue)
game_links <- xpathSApply(doc, "//*//*//*//*//*/div[@class='nbaFnlMnRecapDiv']", xmlValue)
game_links <- xpathSApply(doc, "//*//*//*//*//*//*/div[@class='nbaFnlMnRecapDiv']", xmlValue)
game_links
game_links <- xpathSApply(doc, "//*/div[@class='nbaMnStatsFtr']", xmlValue)
game_links <- xpathSApply(doc, "//*/div[@class='nbaMnStatsFtr']/a", xmlValue)
game_links <- xpathSApply(doc, "//*/div[@class='nbaMnStatsFtr']//a", xmlValue)
getHTMLLinks(doc)
?getHTMLLinks
game_links <- getHTMLLinks(doc)
####################################################################
## Download all of the raw game play by play files from NBA.com ####
####################################################################
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091001/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- getHTMLLinks(doc)
game_links <- unique(getHTMLLinks(doc))
grep(game_links, "gameinfo")
grep(game_links, 'gameinfo')
grep('gameinfo', game_links)
game_links <- grep('gameinfo', unique(getHTMLLinks(doc)))
game_links
game_links <- grep('gameinfo', game_links)
game_links <- unique(getHTMLLinks(doc))
game_links <- grep('gameinfo', game_links)
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- unique(getHTMLLinks(doc))
game_string <- grep('gameinfo', game_links)
game_links[game_string]
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091001/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- grep('gameinfo', unique(getHTMLLinks(doc)))
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091001/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- grep('gameinfo', unique(getHTMLLinks(doc)))
game_links <- unique(getHTMLLinks(doc))
game_urls <- game_links[grep('gameinfo', game_links)]
game_urls <- paste("http://www.nba.com/", game_links[grep('gameinfo', game_links)], sep="")
game_urls
first_date <- "http://www.nba.com/gameline/20091027/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- unique(getHTMLLinks(doc))
game_urls <- paste("http://www.nba.com/", game_links[grep('gameinfo', game_links)], sep="")
game_urls
for(g in game_urls){
print(g)
}
####################################################################
## Download all of the raw game play by play files from NBA.com ####
####################################################################
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091027/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- unique(getHTMLLinks(doc))
game_urls <- paste("http://www.nba.com/", game_links[grep('gameinfo', game_links)], sep="")
for(g in game_urls){
print(g)
}
####################################################################
## Download all of the raw game play by play files from NBA.com ####
####################################################################
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091027/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- unique(getHTMLLinks(doc))
game_urls <- paste("http://www.nba.com/", game_links[grep('gameinfo', game_links)], sep="")
## Loop through each game to get the play by play data
for(g in game_urls){
print(g)
}
####################################################################
## Download all of the raw game play by play files from NBA.com ####
####################################################################
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091027/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- unique(getHTMLLinks(doc))
game_urls <- paste("http://www.nba.com/", game_links[grep('gameinfo', game_links)], sep="")
## Loop through each game to get the play by play data
for(g in game_urls){
print(g)
}
####################################################################
## Download all of the raw game play by play files from NBA.com ####
####################################################################
library(XML)
library(RCurl)
## Read in the first date
first_date <- "http://www.nba.com/gameline/20091027/"
## Extract all Game links from this home link
doc <- htmlParse(first_date, isHTML=TRUE)
game_links <- unique(getHTMLLinks(doc))
game_urls <- paste("http://www.nba.com/", game_links[grep('gameinfo', game_links)], sep="")
## Loop through each game to get the play by play data
for(g in game_urls){
print(g)
}
library(dplyr)
## SET WORKING DIRCTORY ##
setwd("C:/Users/leeri_000/basketball_stats/game_simulation")
## Get dataset with the results
results <- read.csv("data/espn_data/team_wins.csv")[,2:4]
############################################################
################# 2013 LOGIT ###############################
############################################################
## Get 2013 Results
results_2013 <- filter(results, year == 2013)
results_2013_sorted <- results_2013[order(results_2013$team),]
## Get the dataset with simulation output for 2013
simulation <- read.csv("scripts/sim_2013_logit.csv")
sim_sort_logit <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare_2013_logit <- cbind(results_2013_sorted, sim_sort_logit)
compare_2013_logit$squared <- (compare_2013_logit$means - compare_2013_logit$wins)^2
rmse <- sqrt(mean(compare_2013_logit$squared))
rmse
compare_2013_logit$absolute <- abs(compare_2013_logit$means - compare_2013_logit$wins)
mae <- mean(compare_2013_logit$absolute)
mae
############################################################
################# 2013 NAIVE BAYES ##########################
############################################################
## Get 2013 Results
results_2013 <- filter(results, year == 2013)
results_2013_sorted <- results_2013[order(results_2013$team),]
## Get the dataset with simulation output for 2013
simulation <- read.csv("scripts/sim_2013.csv")
sim_sort <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare <- cbind(results_2013_sorted, sim_sort)
compare$squared <- (compare$means - compare$wins)^2
rmse <- sqrt(mean(compare$squared))
rmse
compare$absolute <- abs(compare$means - compare$wins)
mae <- mean(compare$absolute)
mae
#######################################################
################# 2012 LOGIT ##########################
#######################################################
## Get 2012 results
results_2012 <- filter(results, year == 2012)
results_2012_sorted <- results_2012[order(results_2012$team),]
## Get the dataset with simulation output for 2012
simulation <- read.csv("scripts/sim_2012_logit.csv")
sim_sort_logit <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare_2012_logit <- cbind(results_2012_sorted, sim_sort_logit)
compare_2012_logit$squared <- (compare_2012_logit$means - compare_2012_logit$wins)^2
rmse <- sqrt(mean(compare_2012_logit$squared))
rmse
compare_2012_logit$absolute <- abs(compare_2012_logit$means - compare_2012_logit$wins)
mae <- mean(compare_2012_logit$absolute)
mae
#############################################################
################# 2012 NAIVE BAYES ##########################
#############################################################
## Get 2012 results
results_2012 <- filter(results, year == 2012)
results_2012_sorted <- results_2012[order(results_2012$team),]
## Get the dataset with simulation output for 2012
simulation <- read.csv("scripts/sim_2012.csv")
sim_sort <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare_2012 <- cbind(results_2012_sorted, sim_sort)
compare_2012$squared <- (compare_2012$means - compare_2012$wins)^2
rmse <- sqrt(mean(compare_2012$squared))
rmse
compare_2012$absolute <- abs(compare_2012$means - compare_2012$wins)
mae <- mean(compare_2012$absolute)
mae
compare_2013
compare_2012
sd(compare_2012$means)
sd(compare_2012_logit$means)
sd(compare_2013_logit$means)
sd(compare_2013$means)
sd(compare_2013_nb$means)
sd(compare$means)
## Purpose: Compare simulated season to actual results for 2012 and 2013
library(dplyr)
## SET WORKING DIRCTORY ##
setwd("C:/Users/leeri_000/basketball_stats/game_simulation")
## Get dataset with the results
results <- read.csv("data/espn_data/team_wins.csv")[,2:4]
############################################################
################# 2013 LOGIT ###############################
############################################################
## Get 2013 Results
results_2013 <- filter(results, year == 2013)
results_2013_sorted <- results_2013[order(results_2013$team),]
## Get the dataset with simulation output for 2013
simulation <- read.csv("scripts/sim_2013_logit.csv")
sim_sort_logit <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare_2013_logit <- cbind(results_2013_sorted, sim_sort_logit)
compare_2013_logit$squared <- (compare_2013_logit$means - compare_2013_logit$wins)^2
rmse <- sqrt(mean(compare_2013_logit$squared))
rmse
compare_2013_logit$absolute <- abs(compare_2013_logit$means - compare_2013_logit$wins)
mae <- mean(compare_2013_logit$absolute)
mae
############################################################
################# 2013 NAIVE BAYES ##########################
############################################################
## Get 2013 Results
results_2013 <- filter(results, year == 2013)
results_2013_sorted <- results_2013[order(results_2013$team),]
## Get the dataset with simulation output for 2013
simulation <- read.csv("scripts/sim_2013.csv")
sim_sort <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare <- cbind(results_2013_sorted, sim_sort)
compare$squared <- (compare$means - compare$wins)^2
rmse <- sqrt(mean(compare$squared))
rmse
compare$absolute <- abs(compare$means - compare$wins)
mae <- mean(compare$absolute)
mae
#######################################################
################# 2012 LOGIT ##########################
#######################################################
## Get 2012 results
results_2012 <- filter(results, year == 2012)
results_2012_sorted <- results_2012[order(results_2012$team),]
## Get the dataset with simulation output for 2012
simulation <- read.csv("scripts/sim_2012_logit.csv")
sim_sort_logit <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare_2012_logit <- cbind(results_2012_sorted, sim_sort_logit)
compare_2012_logit$squared <- (compare_2012_logit$means - compare_2012_logit$wins)^2
rmse <- sqrt(mean(compare_2012_logit$squared))
rmse
compare_2012_logit$absolute <- abs(compare_2012_logit$means - compare_2012_logit$wins)
mae <- mean(compare_2012_logit$absolute)
mae
#############################################################
################# 2012 NAIVE BAYES ##########################
#############################################################
## Get 2012 results
results_2012 <- filter(results, year == 2012)
results_2012_sorted <- results_2012[order(results_2012$team),]
## Get the dataset with simulation output for 2012
simulation <- read.csv("scripts/sim_2012.csv")
sim_sort <- simulation[order(simulation$X),]
## Get comparison dataframe and mean and absolute error losses
compare_2012 <- cbind(results_2012_sorted, sim_sort)
compare_2012$squared <- (compare_2012$means - compare_2012$wins)^2
rmse <- sqrt(mean(compare_2012$squared))
rmse
compare_2012$absolute <- abs(compare_2012$means - compare_2012$wins)
mae <- mean(compare_2012$absolute)
mae
89-57
68/100
68+75+94
68+75+94/300
68+75+94
237/300
257/320
